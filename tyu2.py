import logging
from selenium import webdriver
from selenium.webdriver.chrome.service import Service as ChromeService
from selenium.webdriver.chrome.options import Options as ChromeOptions
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import json
import time
from datetime import datetime, timezone, timedelta
import re
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, LabeledPrice
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes, Application, \
    MessageHandler, filters, PreCheckoutQueryHandler
import asyncio
import multiprocessing
import os
import random
import html
import traceback
from selenium.common.exceptions import NoSuchElementException
from concurrent.futures import ThreadPoolExecutor
from yookassa import Configuration, Payment
import uuid
from yookassa import Payment as YooPayment
import openai
import tempfile
import glob
from filelock import FileLock
import threading

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –ì–ü–¢
USER_STATES_FILE = "user_states.json"
openai.api_key = "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"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
# proxy_url = "http://modeler_16nxtr:GZeYVyEQP0LH@45.128.156.22:10934"

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è OpenAI
# openai.proxy = {
#     "http": proxy_url,
#     "https": proxy_url,
# }

# shop_id –∏ secret_key –¥–ª—è –ÆKassa
YOOKASSA_SHOP_ID = '1077915'
YOOKASSA_SECRET_KEY = 'live_Tgu9MW5f2A33-THVKpNAtJRkES0Et7t8_lNmYqd2W8k'

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è yookassa
Configuration.account_id = '1077915'
Configuration.secret_key = 'live_Tgu9MW5f2A33-THVKpNAtJRkES0Et7t8_lNmYqd2W8k'

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
TELEGRAM_TOKEN = '8156529655:AAE8wBoWK_qzl5FIErKg5LTSk1ItoZHKAB8'
ADMIN_ID = ['holdstater', 'darkness3625']  # usernames Telegram –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
COMMENTS_CHAT_ID = -1002575677046  # <-- id —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤

USERS_FILE = 'users.json'
PROMO_FILE = 'promo_codes.json'

# === –î–û–ë–ê–í–õ–Ø–ï–ú –ü–ï–†–ï–ú–ï–ù–ù–´–ï –î–õ–Ø CRYPTO PAY ===
CRYPTO_PAY_API_TOKEN = '374172:AA1k9OnA9xF6X5OSoFGT8B9f1RkyhyGmOod'  # –¢–æ–∫–µ–Ω Crypto Pay API
CRYPTO_PAY_API_URL = 'https://pay.crypt.bot/api/'  # –î–ª—è mainnet, –¥–ª—è —Ç–µ—Å—Ç–∞: https://testnet-pay.crypt.bot/api/

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('tennis_parser.log'),
        logging.StreamHandler()
    ]
)

def parsing_worker(chat_id, context, loop=None):
    parser = TennisParser()
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        token = TELEGRAM_TOKEN
        
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
        def send_message(text, parse_mode=None, reply_markup=None):
            url = f"https://api.telegram.org/bot{token}/sendMessage"
            data = {
                "chat_id": chat_id,
                "text": text
            }
            if parse_mode:
                data["parse_mode"] = parse_mode
            if reply_markup:
                data["reply_markup"] = json.dumps(reply_markup)
            response = requests.post(url, data=data)
            return response.json()
            
        # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–π HTTP –∑–∞–ø—Ä–æ—Å
        def send_document(file_path):
            url = f"https://api.telegram.org/bot{token}/sendDocument"
            with open(file_path, 'rb') as f:
                files = {'document': f}
                data = {'chat_id': chat_id}
                response = requests.post(url, data=data, files=files)
                return response.json()
        
        # –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        send_message("–ù–∞—á–∏–Ω–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ Live –º–∞—Ç—á–µ–π...")
        
        live_matches = []
        total = 0
        try:
            match_links = parser.get_match_links()
            total = len(match_links)
            send_message(f"–ù–∞–π–¥–µ–Ω–æ live-–º–∞—Ç—á–µ–π: {total}")
            
            for idx, match in enumerate(match_links, 1):
                urls = match['urls'] if 'urls' in match else [match['url']]
                container_home = match.get('home_player', '')
                container_away = match.get('away_player', '')
                found = False
                for link in urls:
                    try:
                        match_info = parser.parse_match_details(link)
                        if match_info:
                            parsed_home = match_info.get('home_player', '').strip().lower()
                            parsed_away = match_info.get('away_player', '').strip().lower()
                            cont_home = container_home.strip().lower()
                            cont_away = container_away.strip().lower()
                            if parsed_home == cont_home and parsed_away == cont_away:
                                match_info['home_player'] = container_home
                                match_info['away_player'] = container_away
                                match_info['source_url'] = link
                                match_info['url'] = link
                                match_info['container_home'] = container_home
                                match_info['container_away'] = container_away
                                live_matches.append(match_info)
                                found = True
                                break
                        time.sleep(0.5)
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞—Ç—á–∞ {link}: {e}")
                if not found and urls:
                    match_info = parser.parse_match_details(urls[0])
                    if match_info:
                        match_info['home_player'] = container_home
                        match_info['away_player'] = container_away
                        match_info['source_url'] = urls[0]
                        match_info['url'] = urls[0]
                        match_info['container_home'] = container_home
                        match_info['container_away'] = container_away
                        match_info['fallback_link'] = True
                        live_matches.append(match_info)
                if idx % 3 == 0 or idx == total:
                    send_message(f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ {idx}/{total} –º–∞—Ç—á–µ–π. –ù–∞–π–¥–µ–Ω–æ {len(live_matches)} —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
        except Exception as e:
            send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π: {e}")
            
        if not live_matches:
            send_message("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ live-–º–∞—Ç—á–∞ —Å –ø–æ–¥—Ö–æ–¥—è—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏.")
            return
            
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        json_file = f"live_matches_{timestamp}.json"
        parser.save_to_json(live_matches, filename=json_file)
        update_user_state(chat_id, data=live_matches)
        
        send_message(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Live –º–∞—Ç—á–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {json_file}")
        
        try:
            send_document(json_file)
        except Exception as e:
            send_message(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª: {e}")
            
        msg = (
            '–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω:\n\n'
            '–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ç–∞–≤–∏—Ç—å <b>–ü–û –°–ò–°–¢–ï–ú–ï</b>üëàüèª\n'
            '–ù–æ –∫–∞–∂–¥—ã–µ 20-30 –º–∏–Ω—É—Ç –æ–±–Ω–æ–≤–ª—è–π—Ç–µ –ø–æ–¥–±–æ—Ä –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É.\n'
            '–¶–∏—Ñ—Ä—ã –º–µ–Ω—è—é—Ç—Å—è\n<b>–ú–æ–∂–µ—à—å –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –≤ —á–∞—Ç –∏ –ø–æ–º–æ—â–Ω–∏–∫ –æ—Ç–≤–µ—Ç–∏—Ç</b>\n'
        )
        
        keyboard = {
            "inline_keyboard": [
                [{"text": "–ü–û –°–ò–°–¢–ï–ú–ï", "url": "https://t.me/holdstat/14858"}],
                [{"text": "–ï–©–Å –û–î–ò–ù –ü–û–î–ë–û–†", "callback_data": "pay_crypto"}]
            ]
        }
        
        send_message(msg, parse_mode="HTML", reply_markup=keyboard)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤
        try:
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –æ–±—ä–µ–∫—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å filter_and_send_favorites
            class SimpleTelegramBot:
                def __init__(self, token):
                    self.token = token
                    
                async def send_message(self, chat_id, text, parse_mode=None, disable_web_page_preview=None, reply_markup=None):
                    url = f"https://api.telegram.org/bot{self.token}/sendMessage"
                    data = {
                        "chat_id": chat_id,
                        "text": text
                    }
                    if parse_mode:
                        data["parse_mode"] = parse_mode
                    if disable_web_page_preview is not None:
                        data["disable_web_page_preview"] = disable_web_page_preview
                    if reply_markup:
                        data["reply_markup"] = json.dumps(reply_markup)
                    response = requests.post(url, data=data)
                    return response.json()
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
            def run_filter():
                try:
                    simple_bot = SimpleTelegramBot(token)
                    asyncio.run(parser.filter_and_send_favorites(live_matches, simple_bot, chat_id))
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤: {e}")
                    send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤: {e}")
            
            threading.Thread(target=run_filter).start()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤: {e}")
            send_message(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤: {e}")
            
    finally:
        parser.close()



def clean_html_for_telegram(text):
    import re
    import html as html_lib
    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ <b> –∏ </b>, –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ <...> —ç–∫—Ä–∞–Ω–∏—Ä—É–µ–º
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ < –∫—Ä–æ–º–µ <b> –∏ </b>
    text = re.sub(r'<(?!/?b>)', '&lt;', text)
    text = re.sub(r'(?<!<)/b>', '&gt;/b&gt;', text)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–Ω–æ—Å—Ç—å —Ç–µ–≥–æ–≤
    if text.count('<b>') != text.count('</b>'):
        text = text.replace('<b>', '**').replace('</b>', '**')
    # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è < –∏ >
    text = html_lib.escape(text)
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ–±—Ä–∞—Ç–Ω–æ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã–µ —Ç–µ–≥–∏
    text = text.replace('&lt;b&gt;', '<b>').replace('&lt;/b&gt;', '</b>')
    return text


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–ø–ª–∞—Ç—É (–°–ë–ü –∏ –¥—Ä.)
async def send_sbp_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    amount = '299.00'
    description = '–ü–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö 3 –º–∞—Ç—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
    return_url = 'https://t.me/'  # –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å —Å—Å—ã–ª–∫—É –Ω–∞ –±–æ—Ç–∞ –∏–ª–∏ –∫–∞–Ω–∞–ª
    email = 'user@example.com'
    try:
        payment = Payment.create({
            "amount": {
                "value": amount,
                "currency": "RUB"
            },
            "confirmation": {
                "type": "redirect",
                "return_url": return_url
            },
            "capture": True,
            "description": description,
            "receipt": {
                "items": [
                    {
                        "description": "–ü–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö 3 –º–∞—Ç—á–µ–π",
                        "quantity": "1.00",
                        "amount": {
                            "value": amount,
                            "currency": "RUB"
                        },
                        "vat_code": 1,
                        "payment_subject": "service",
                        "payment_mode": "full_prepayment"
                    }
                ],
                "email": email
            }
        }, uuid.uuid4())
        confirmation_url = payment.confirmation.confirmation_url
        msg = (
            'üí∏ <b>–û–ø–ª–∞—Ç–∞ —á–µ—Ä–µ–∑ –ÆKassa (–°–ë–ü, –∫–∞—Ä—Ç—ã –∏ –¥—Ä.)</b>\n\n'
            '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n'
            f'<a href="{confirmation_url}">–û–ø–ª–∞—Ç–∏—Ç—å</a>'
        )
        await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML', disable_web_page_preview=False)
        # –ó–∞–ø—É—Å–∫–∞–µ–º polling —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞—Ç–µ–∂–∞
        await poll_yookassa_payment_status(context, chat_id, payment.id)
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞ —á–µ—Ä–µ–∑ –ÆKassa: {e}')


async def poll_yookassa_payment_status(context, chat_id, payment_id, max_attempts=40, delay=15):
    for attempt in range(max_attempts):
        payment = YooPayment.find_one(payment_id)
        if payment.status == 'succeeded':
            await context.bot.send_message(chat_id=chat_id, text='‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞! –ó–∞–ø—É—Å–∫–∞—é –ø–æ–¥–±–æ—Ä...')
            return
        await asyncio.sleep(delay)
    await context.bot.send_message(chat_id=chat_id,
                                   text='‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')


class TennisParser:
    def __init__(self):
        self.logger = logging.getLogger(__name__)
        self.base_url = "https://www.flashscorekz.com"
        self.url = f"{self.base_url}/tennis/"
        self.live_url = f"{self.base_url}/live/tennis/"
        self.setup_driver()

    def setup_driver(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chrome WebDriver"""
        try:
            start_time = time.time()
            self.logger.info("–ù–∞—á–∞–ª–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver...")
            chrome_options = ChromeOptions()
            # user-data-dir –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            chrome_options.add_argument('--headless')  # –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º headless –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏
            chrome_options.add_argument('--no-sandbox')
            chrome_options.add_argument('--disable-dev-shm-usage')
            chrome_options.add_argument('--disable-gpu')
            chrome_options.add_argument('--remote-debugging-port=0')
            service = ChromeService(executable_path='/usr/local/bin/chromedriver')
            self.logger.info("–°–æ–∑–¥–∞—é —ç–∫–∑–µ–º–ø–ª—è—Ä Chrome WebDriver...")
            self.driver = webdriver.Chrome(service=service, options=chrome_options)
            self.logger.info("WebDriver —Å–æ–∑–¥–∞–Ω, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é —Ç–∞–π–º–∞—É—Ç...")
            self.driver.set_page_load_timeout(40)
            end_time = time.time()
            self.logger.info(f"WebDriver —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∑–∞ {end_time - start_time:.2f} —Å–µ–∫—É–Ω–¥")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WebDriver: {str(e)}\n{traceback.format_exc()}")
            raise

    def get_participant_name(self, elem):
        """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ —Å–æ–±–∏—Ä–∞–µ—Ç –∏–º—è –∏–≥—Ä–æ–∫–∞ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã (–≤–∫–ª—é—á–∞—è –ø–∞—Ä–Ω—ã–µ/–∫–æ–º–∞–Ω–¥–Ω—ã–µ –º–∞—Ç—á–∏), —Ä–∞–∑–¥–µ–ª—è–µ—Ç –¥–ª–∏–Ω–Ω—ã–º —Ç–∏—Ä–µ"""
        try:
            parts = []
            for child in elem.find_elements(By.XPATH, ".//*"):
                txt = child.text.strip()
                if txt:
                    parts.append(txt)
            if not parts:
                return elem.text.strip()
            return " ‚Äî ".join(parts)
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏–º–µ–Ω–∏ –∏–≥—Ä–æ–∫–∞: {e}")
            return elem.text.strip()

    def get_match_links(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –∏ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è live –º–∞—Ç—á–µ–π (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ –¥–ª—è –æ–¥–∏–Ω–æ—á–Ω—ã—Ö, –ø–∞—Ä–Ω—ã—Ö, –∫–æ–º–∞–Ω–¥–Ω—ã—Ö, –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Å—ã–ª–æ–∫ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ)"""
        try:
            self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã LIVE –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞: {self.live_url}")
            try:
                self.logger.info(f"–ü—Ä–æ–±—É—é self.driver.get({self.live_url})")
                self.driver.get(self.live_url)
                self.logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.live_url} –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∂–¥—É 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞")
                time.sleep(5)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {self.live_url}: {e}\n{traceback.format_exc()}")
                return []
            try:
                self.logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ sportName (WebDriverWait 3 —Å–µ–∫)")
                WebDriverWait(self.driver, 3).until(
                    EC.presence_of_element_located((By.CLASS_NAME, "sportName"))
                )
                self.logger.info("–°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ LIVE –¥–ª—è —Ç–µ–Ω–Ω–∏—Å–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É LIVE: {str(e)}\n{traceback.format_exc()}")
                alt_live_url = f"{self.url}?type=live"
                self.logger.info(f"–ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É LIVE: {alt_live_url}")
                try:
                    self.logger.info(f"–ü—Ä–æ–±—É—é self.driver.get({alt_live_url})")
                    self.driver.get(alt_live_url)
                    self.logger.info(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {alt_live_url} –∑–∞–≥—Ä—É–∂–µ–Ω–∞, –∂–¥—É 5 —Å–µ–∫—É–Ω–¥ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞")
                    time.sleep(5)
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {alt_live_url}: {e}\n{traceback.format_exc()}")
                    return []
                try:
                    self.logger.info("–û–∂–∏–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ sportName (WebDriverWait 3 —Å–µ–∫) –¥–ª—è –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
                    WebDriverWait(self.driver, 3).until(
                        EC.presence_of_element_located((By.CLASS_NAME, "sportName"))
                    )
                    self.logger.info("–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ LIVE –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
                except Exception as e:
                    self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É LIVE: {str(e)}\n{traceback.format_exc()}")
                    return []
            self.logger.info("–°–æ–±–∏—Ä–∞—é –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã live-–º–∞—Ç—á–µ–π...")
            matches = []
            try:
                match_elements = self.driver.find_elements(By.CSS_SELECTOR, ".event__match.event__match--live")
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(match_elements)} live-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤ –º–∞—Ç—á–µ–π")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ live-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤: {e}\n{traceback.format_exc()}")
                return []
            for match in match_elements:
                try:
                    home_elem = match.find_element(By.CSS_SELECTOR, ".event__participant--home")
                    away_elem = match.find_element(By.CSS_SELECTOR, ".event__participant--away")
                    home = self.get_participant_name(home_elem)
                    away = self.get_participant_name(away_elem)
                    link_elems = match.find_elements(By.CSS_SELECTOR, "a[href*='match/']")
                    links = [a.get_attribute("href") for a in link_elems if a.get_attribute("href")]
                    if links and home and away:
                        matches.append({"urls": links, "home_player": home, "away_player": away})
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–µ –¥–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–∞: {e}\n{traceback.format_exc()}")
                    continue
            self.logger.info(f"–í—Å–µ–≥–æ —Å–æ–±—Ä–∞–Ω–æ {len(matches)} live-–º–∞—Ç—á–µ–π —Å –∏–≥—Ä–æ–∫–∞–º–∏ –∏ —Å—Å—ã–ª–∫–∞–º–∏ (–≤–æ–∑–º–æ–∂–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ç—á)")
            return matches
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π: {str(e)}\n{traceback.format_exc()}")
            return []

    def parse_serve_stats(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏"""
        start_time = time.time()
        self.logger.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏...")
        try:
            serve_stats = {}
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
            try:
                self.logger.info("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

                # –ò—Å–ø–æ–ª—å–∑—É–µ–º JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –∫–ª–∏–∫–∞ –ø–æ –≤–∫–ª–∞–¥–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                stats_tab_clicked = self.driver.execute_script("""
                    // –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                    const statsTabs = [
                        'a[href*="#/match-statistics"]',
                        'a[data-tab-id*="statistics"]',
                        'a[data-tab="statistics"]',
                        'button[data-testid="wcl-tab"]',
                        'div[class*="tab"][class*="statistics"]',
                        'a[href*="statistics"]',
                        'li[data-tab="statistics"]',
                        'button[data-tab="statistics"]',
                        'a:contains("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")',
                        'a:contains("Statistics")',
                        'div[class*="tab"]:contains("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")',
                        'div[class*="tab"]:contains("Statistics")'
                    ];

                    for (const selector of statsTabs) {
                        try {
                            const tabs = document.querySelectorAll(selector);
                            for (const tab of tabs) {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
                                const text = tab.textContent.toLowerCase();
                                if (text.includes('stat') || text.includes('—Å—Ç–∞—Ç')) {
                                    tab.click();
                                    return true;
                                }
                            }
                        } catch (e) {
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                            continue;
                        }
                    }

                    // –ò—â–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ –ø—Ä–∏–º–µ—Ä–∞
                    const specificButton = document.querySelector('button[data-testid="wcl-tab"][role="tab"]');
                    if (specificButton && specificButton.textContent.includes('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')) {
                        specificButton.click();
                        return true;
                    }

                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                    const allLinks = document.querySelectorAll('a, div[role="tab"], li[role="tab"], button[role="tab"]');
                    for (const link of allLinks) {
                        const text = link.textContent.toLowerCase();
                        if (text.includes('stat') || text.includes('—Å—Ç–∞—Ç')) {
                            link.click();
                            return true;
                        }
                    }

                    return false;
                """)

                if stats_tab_clicked:
                    self.logger.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π")
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
                    time.sleep(2)
                else:
                    self.logger.info("–í–∫–ª–∞–¥–∫–∞ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")

                    # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ URL
                    current_url = self.driver.current_url
                    if "#/match-statistics" not in current_url:
                        stats_url = current_url.split("#")[0] + "#/match-summary/match-statistics"
                        self.logger.info(f"–ü–µ—Ä–µ—Ö–æ–¥–∏–º –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ URL: {stats_url}")
                        self.driver.get(stats_url)
                        time.sleep(2)
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

            # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...")
            try:
                WebDriverWait(self.driver, 3).until(
                    EC.presence_of_element_located(
                        (By.CSS_SELECTOR, "div[data-analytics-context='tab-match-statistics']"))
                )
                self.logger.info("–°–µ–∫—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
            except Exception as e:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–∂–¥–∞—Ç—å—Å—è —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                return {}

            # –ù–∞—Ö–æ–¥–∏–º —Å–µ–∫—Ü–∏—é –ø–æ–¥–∞—á–∏ - —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–æ–≤—ã–π —Å–µ–ª–µ–∫—Ç–æ—Ä
            self.logger.info("–ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–∏ –ø–æ–¥–∞—á–∏...")
            try:
                serve_section = None
                # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –ø–æ –Ω–æ–≤–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É
                try:
                    serve_section = self.driver.find_element(By.XPATH,
                                                             "//div[@data-analytics-context='tab-match-statistics']//div[contains(@class, 'section')][.//div[contains(@class, 'sectionHeader') and contains(text(), '–ü–æ–¥–∞—á–∞')]]")
                    self.logger.info("–°–µ–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –Ω–æ–≤–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É")
                except Exception as e:
                    self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –ø–æ–¥–∞—á–∏ –ø–æ –Ω–æ–≤–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {str(e)}")

                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –Ω–æ–≤–æ–º—É, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                if not serve_section:
                    try:
                        serve_section = self.driver.find_element(By.XPATH,
                                                                 "//div[contains(@class, 'section')][.//div[contains(@class, 'section__title') and contains(text(), '–ü–æ–¥–∞—á–∞')]]")
                        self.logger.info("–°–µ–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É")
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –ø–æ–¥–∞—á–∏ –ø–æ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {str(e)}")

                # –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø–æ–ø—Ä–æ–±—É–µ–º –±–æ–ª–µ–µ –æ–±—â–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä
                if not serve_section:
                    try:
                        sections = self.driver.find_elements(By.XPATH,
                                                             "//div[contains(@class, 'section')]")
                        for section in sections:
                            try:
                                header = section.find_element(By.XPATH,
                                                              ".//div[contains(@class, 'sectionHeader') or contains(@class, 'section__title')]")
                                if '–ø–æ–¥–∞—á–∞' in header.text.lower():
                                    serve_section = section
                                    self.logger.info("–°–µ–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –æ–±—â–µ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É –∏ —Ç–µ–∫—Å—Ç—É –∑–∞–≥–æ–ª–æ–≤–∫–∞")
                                    break
                            except:
                                continue
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–µ–∫—Ü–∏—é –ø–æ–¥–∞—á–∏ –ø–æ –æ–±—â–µ–º—É —Å–µ–ª–µ–∫—Ç–æ—Ä—É: {str(e)}")

                # –ï—â–µ –æ–¥–∏–Ω –º–µ—Ç–æ–¥ - –∏—â–µ–º –Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                if not serve_section:
                    try:
                        all_stats = self.driver.find_elements(By.CSS_SELECTOR, ".statName_Kj5Sw, .statCategory_y0tVC")
                        for stat in all_stats:
                            if any(keyword in stat.text.lower() for keyword in
                                   ['–ø–µ—Ä–≤', '–ø–æ–¥–∞—á', '–ø–æ–¥–∞—á–∏ –Ω–∞–≤—ã–ª–µ—Ç', '—ç–π—Å', '–¥–≤–æ–π–Ω']):
                                # –ù–∞—à–ª–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                                self.logger.info("–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ")
                                serve_section = stat.find_element(By.XPATH,
                                                                  "./ancestor::div[contains(@class, 'section') or contains(@class, 'wcl-category')]")
                                break
                    except Exception as e:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∞—á–∏ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ: {str(e)}")

                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ —Å–µ–∫—Ü–∏—é –ø–æ–¥–∞—á–∏, –∏–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                if serve_section:
                    # –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏
                    try:
                        stat_rows = serve_section.find_elements(By.CSS_SELECTOR,
                                                                "[class*='statisticsRow'], [class*='statRow'], .wcl-row_OFViZ")
                        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(stat_rows)} —Å—Ç—Ä–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏")

                        for row in stat_rows:
                            try:
                                # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
                                category_elem = row.find_element(By.CSS_SELECTOR,
                                                                 "[class*='category'], [class*='statCategory'], .wcl-category_7qsgP")
                                category = category_elem.text.strip()

                                if not category or category.lower() == '–ø–æ–¥–∞—á–∞':
                                    continue  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏

                                # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                                home_elem = row.find_element(By.CSS_SELECTOR,
                                                             "[class*='home'], [class*='player1'], .wcl-homePlayer_HRiEa")
                                away_elem = row.find_element(By.CSS_SELECTOR,
                                                             "[class*='away'], [class*='player2'], .wcl-awayPlayer_CZE9L")

                                home_value = home_elem.text.strip()
                                away_value = away_elem.text.strip()

                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                if '(' in home_value and ')' in home_value:
                                    # –§–æ—Ä–º–∞—Ç: 70% (14/20)
                                    home_percent = re.search(r'(\d+)%', home_value)
                                    home_details = re.search(r'\((.*?)\)', home_value)

                                    if home_percent and home_details:
                                        home_data = {
                                            'value': f"{home_percent.group(1)}%",
                                            'details': home_details.group(1)
                                        }
                                    else:
                                        home_data = home_value
                                else:
                                    home_data = home_value

                                if '(' in away_value and ')' in away_value:
                                    # –§–æ—Ä–º–∞—Ç: 70% (14/20)
                                    away_percent = re.search(r'(\d+)%', away_value)
                                    away_details = re.search(r'\((.*?)\)', away_value)

                                    if away_percent and away_details:
                                        away_data = {
                                            'value': f"{away_percent.group(1)}%",
                                            'details': away_details.group(1)
                                        }
                                    else:
                                        away_data = away_value
                                else:
                                    away_data = away_value

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                serve_stats[category] = {
                                    'home': home_data,
                                    'away': away_data
                                }

                                self.logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏: {category} - {home_data} | {away_data}")
                            except Exception as e:
                                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏: {str(e)}")
                                continue
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç—Ä–æ–∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏: {str(e)}")
                else:
                    self.logger.warning("–°–µ–∫—Ü–∏—è –ø–æ–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

                    # –ü—Ä–æ–±—É–µ–º –µ—â–µ –æ–¥–∏–Ω —Å–ø–æ—Å–æ–± - –∏—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –Ω–∞–ø—Ä—è–º—É—é
                    try:
                        all_stat_rows = self.driver.find_elements(By.CSS_SELECTOR,
                                                                  "[data-testid='wcl-statistics'], div[class*='statisticsRow'], div[class*='statRow']")

                        for row in all_stat_rows:
                            try:
                                row_text = row.text.lower()
                                if any(keyword in row_text for keyword in ['—ç–π—Å', '–ø–æ–¥–∞—á', '–¥–≤–æ–π–Ω', '–ø–µ—Ä–≤']):
                                    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏—è
                                    try:
                                        category_text = re.search(r'^(.*?)(?:\d|\s\d)', row_text)
                                        category = category_text.group(1).strip() if category_text else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                        values = re.findall(r'(\d+%|\d+/\d+|\d+)', row_text)
                                        if len(values) >= 2:
                                            home_value = values[0]
                                            away_value = values[-1]

                                            serve_stats[category] = {
                                                'home': home_value,
                                                'away': away_value
                                            }

                                            self.logger.info(
                                                f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏: {category} - {home_value} | {away_value}")
                                    except Exception as e:
                                        self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {str(e)}")
                                        continue
                            except Exception as e:
                                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                                continue
                    except Exception as e:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏: {str(e)}")

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ–∫—Ü–∏–∏ –ø–æ–¥–∞—á–∏: {str(e)}")

            total_time = time.time() - start_time
            self.logger.info(
                f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥. –ù–∞–π–¥–µ–Ω–æ {len(serve_stats)} –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤")

            return serve_stats

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏: {str(e)}")
            traceback_str = traceback.format_exc()
            self.logger.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback_str}")
            return {}

    def parse_game_stats(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—á–∫–æ–≤"""
        start_time = time.time()
        self.logger.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—á–∫–æ–≤...")
        try:
            # –ú—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏,
            # —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –≤ –º–µ—Ç–æ–¥–µ parse_serve_stats

            self.logger.info("–ü–æ–∏—Å–∫ —Å–µ–∫—Ü–∏–π –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—á–∫–æ–≤...")
            game_stats = {}

            # –ò—â–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            try:
                sections = self.driver.find_elements(By.CSS_SELECTOR,
                                                     "div[class*='section'], div[class*='wcl-category'], div[data-testid='wcl-category']")
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(sections)} —Å–µ–∫—Ü–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")

                for section in sections:
                    try:
                        # –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
                        header_elem = section.find_element(By.CSS_SELECTOR,
                                                           "div[class*='header'], div[class*='Header'], div[class*='title'], div[class*='wcl-category']")
                        header_text = header_elem.text.strip().lower()

                        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–µ–∫—Ü–∏—é –ø–æ–¥–∞—á–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –≤ parse_serve_stats
                        if '–ø–æ–¥–∞—á–∞' in header_text or 'serve' in header_text:
                            continue

                        # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏
                        section_name = header_elem.text.strip()

                        # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —ç—Ç–æ–π —Å–µ–∫—Ü–∏–∏
                        stat_rows = section.find_elements(By.CSS_SELECTOR,
                                                          "[class*='statisticsRow'], [class*='statRow'], [data-testid='wcl-statistics'], .wcl-row_OFViZ")

                        # –ü–∞—Ä—Å–∏–º –∫–∞–∂–¥—É—é —Å—Ç—Ä–æ–∫—É
                        for row in stat_rows:
                            try:
                                # –ù–∞—Ö–æ–¥–∏–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (—Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏)
                                category_elem = row.find_element(By.CSS_SELECTOR,
                                                                 "[class*='category'], [class*='statCategory'], .wcl-category_7qsgP")
                                category = category_elem.text.strip()

                                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
                                if not category or category.lower() == section_name.lower():
                                    continue

                                # –ù–∞—Ö–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–æ–º–∞—à–Ω–µ–≥–æ –∏ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
                                home_elem = row.find_element(By.CSS_SELECTOR,
                                                             "[class*='home'], [class*='player1'], .wcl-homePlayer_HRiEa")
                                away_elem = row.find_element(By.CSS_SELECTOR,
                                                             "[class*='away'], [class*='player2'], .wcl-awayPlayer_CZE9L")

                                home_value = home_elem.text.strip()
                                away_value = away_elem.text.strip()

                                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è —Ç–∞–∫ –∂–µ, –∫–∞–∫ –≤ parse_serve_stats
                                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–¥–µ—Ä–∂–∞—Ç –ª–∏ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–Ω—Ç—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                                if '(' in home_value and ')' in home_value:
                                    # –§–æ—Ä–º–∞—Ç: 70% (14/20)
                                    home_percent = re.search(r'(\d+)%', home_value)
                                    home_details = re.search(r'\((.*?)\)', home_value)

                                    if home_percent and home_details:
                                        home_data = {
                                            'value': f"{home_percent.group(1)}%",
                                            'details': home_details.group(1)
                                        }
                                    else:
                                        home_data = home_value
                                else:
                                    home_data = home_value

                                if '(' in away_value and ')' in away_value:
                                    # –§–æ—Ä–º–∞—Ç: 70% (14/20)
                                    away_percent = re.search(r'(\d+)%', away_value)
                                    away_details = re.search(r'\((.*?)\)', away_value)

                                    if away_percent and away_details:
                                        away_data = {
                                            'value': f"{away_percent.group(1)}%",
                                            'details': away_details.group(1)
                                        }
                                    else:
                                        away_data = away_value
                                else:
                                    away_data = away_value

                                # –°–æ–∑–¥–∞–µ–º –ø–æ–ª–Ω–æ–µ –∏–º—è –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º —Å–µ–∫—Ü–∏–∏
                                full_category = f"{section_name} - {category}" if section_name != category else category

                                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
                                game_stats[full_category] = {
                                    'home': home_data,
                                    'away': away_data
                                }

                                self.logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {full_category} - {home_data} | {away_data}")
                            except Exception as e:
                                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                                continue
                    except Exception as e:
                        self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–µ–∫—Ü–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                        continue
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å–µ–∫—Ü–∏–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

            # –ò—â–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –µ—Å–ª–∏ –º—ã –Ω–µ –Ω–∞—à–ª–∏ –µ—ë —Ä–∞–Ω–µ–µ
            if not game_stats:
                try:
                    all_stat_rows = self.driver.find_elements(By.CSS_SELECTOR,
                                                              "[data-testid='wcl-statistics'], div[class*='statisticsRow'], div[class*='statRow']")

                    for row in all_stat_rows:
                        try:
                            row_text = row.text.lower()

                            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫–∏ –ø–æ–¥–∞—á–∏, —Ç–∞–∫ –∫–∞–∫ –æ–Ω–∏ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã
                            if any(keyword in row_text for keyword in ['—ç–π—Å', '–ø–æ–¥–∞—á', '–¥–≤–æ–π–Ω', '–ø–µ—Ä–≤']):
                                continue

                            # –ü–æ–ª—É—á–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏ –∑–Ω–∞—á–µ–Ω–∏—è
                            try:
                                category_text = re.search(r'^(.*?)(?:\d|\s\d)', row_text)
                                category = category_text.group(1).strip() if category_text else "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

                                # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                                values = re.findall(r'(\d+%|\d+/\d+|\d+)', row_text)
                                if len(values) >= 2:
                                    home_value = values[0]
                                    away_value = values[-1]

                                    game_stats[category] = {
                                        'home': home_value,
                                        'away': away_value
                                    }

                                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {category} - {home_value} | {away_value}")
                            except Exception as e:
                                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç—Ä–æ–∫–∏: {str(e)}")
                                continue
                        except Exception as e:
                            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç—Ä–æ–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                            continue
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä—è–º–æ–º –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

            total_time = time.time() - start_time
            self.logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—á–∫–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")

            return game_stats

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏ –æ—á–∫–æ–≤: {str(e)}")
            traceback_str = traceback.format_exc()
            self.logger.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback_str}")
            return {}

    def parse_games_stats(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–µ–π–º–∞–º"""
        start_time = time.time()
        self.logger.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–µ–π–º–∞–º...")
        try:
            # –ú—ã –Ω–µ –≤—ã–∑—ã–≤–∞–µ–º –∑–¥–µ—Å—å –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏,
            # —Ç–∞–∫ –∫–∞–∫ –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–æ —É–∂–µ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ –≤ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –º–µ—Ç–æ–¥–∞—Ö

            self.logger.info("–ü–æ–∏—Å–∫ –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–π–º–∞—Ö...")
            games_stats = {}

            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ –ø–æ —Å–µ—Ç–∞–º –∏ –≥–µ–π–º–∞–º
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–∞—Ç—á–µ (—Å—á–µ—Ç, —Å–µ—Ç—ã –∏ —Ç.–¥.)
                score_elements = self.driver.find_elements(By.CSS_SELECTOR,
                                                           "[class*='score'], [class*='Score'], [data-testid='wcl-score'], .wcl-score")

                if score_elements:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(score_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Å—á–µ—Ç–µ")

                    # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º —Å—á–µ—Ç–µ
                    try:
                        current_score = self.driver.find_element(By.CSS_SELECTOR,
                                                                 "[class*='current-score'], [class*='currentScore'], [data-testid='wcl-current-score']")
                        if current_score:
                            current_score_text = current_score.text.strip()
                            games_stats['–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç'] = current_score_text
                            self.logger.info(f"–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç: {current_score_text}")
                    except Exception as e:
                        self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–µ–∫—É—â–∏–π —Å—á–µ—Ç: {str(e)}")

                    # –ü–∞—Ä—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—á–µ—Ç–µ –ø–æ —Å–µ—Ç–∞–º
                    for score_element in score_elements:
                        try:
                            # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ç–∞—Ö
                            set_info = score_element.find_elements(By.CSS_SELECTOR,
                                                                   "[class*='set'], [class*='Set'], [data-testid='wcl-set']")

                            if set_info:
                                for i, set_elem in enumerate(set_info, 1):
                                    try:
                                        set_text = set_elem.text.strip()
                                        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—á–µ—Ç –ø–æ –≥–µ–π–º–∞–º –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–µ—Ç–∞
                                        scores = re.findall(r'\d+', set_text)
                                        if len(scores) >= 2:
                                            home_score = scores[0]
                                            away_score = scores[1]
                                            games_stats[f'–°–µ—Ç {i}'] = {
                                                'home': home_score,
                                                'away': away_score
                                            }
                                            self.logger.info(f"–°–µ—Ç {i}: {home_score} - {away_score}")
                                    except Exception as e:
                                        self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–µ {i}: {str(e)}")
                        except Exception as e:
                            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–µ—Ç–∞—Ö: {str(e)}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å—á–µ—Ç–∞: {str(e)}")

            # –ò—â–µ–º –¥–µ—Ç–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–π–º–∞—Ö –≤ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            if not games_stats:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤–∫–ª–∞–¥–∫–∏ —Å –¥–µ—Ç–∞–ª—è–º–∏ –º–∞—Ç—á–∞
                    tab_selectors = [
                        "a[href*='#/match-summary']",
                        "button[data-testid='wcl-tab']:not([data-selected='true'])",
                        "button.wcl-tab_y-fEC:not(.wcl-tabSelected_T--kd)"
                    ]

                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–û–±–∑–æ—Ä –º–∞—Ç—á–∞"
                    tab_found = False
                    for selector in tab_selectors:
                        try:
                            tabs = self.driver.find_elements(By.CSS_SELECTOR, selector)
                            if tabs:
                                for tab in tabs:
                                    try:
                                        tab_text = tab.text.strip().lower()
                                        if '–æ–±–∑–æ—Ä' in tab_text or '–º–∞—Ç—á' in tab_text or 'summary' in tab_text or 'match' in tab_text:
                                            # –ö–ª–∏–∫–∞–µ–º –Ω–∞ –≤–∫–ª–∞–¥–∫—É —Å –æ–±–∑–æ—Ä–æ–º –º–∞—Ç—á–∞
                                            self.logger.info(f"–ù–∞–π–¥–µ–Ω–∞ –≤–∫–ª–∞–¥–∫–∞ –æ–±–∑–æ—Ä–∞ –º–∞—Ç—á–∞: {tab_text}")
                                            self.driver.execute_script("arguments[0].click();", tab)
                                            time.sleep(1)  # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
                                            tab_found = True
                                            break
                                    except Exception as e:
                                        self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç–µ–∫—Å—Ç–∞ –≤–∫–ª–∞–¥–∫–∏: {str(e)}")
                                if tab_found:
                                    break
                        except Exception as e:
                            self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤–∫–ª–∞–¥–∫–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä—É {selector}: {str(e)}")

                    if tab_found:
                        self.logger.info("–£—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—à–ª–∏ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ–±–∑–æ—Ä–∞ –º–∞—Ç—á–∞")

                        # –ò—â–µ–º —Ç–∞–±–ª–∏—Ü—É –º–∞—Ç—á–∞ –∏–ª–∏ –ø–æ–¥–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        try:
                            match_period_elements = self.driver.find_elements(By.CSS_SELECTOR,
                                                                              "[class*='period'], [class*='Period'], [data-testid='wcl-period']")

                            if match_period_elements:
                                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(match_period_elements)} –ø–µ—Ä–∏–æ–¥–æ–≤ –º–∞—Ç—á–∞")

                                for i, period in enumerate(match_period_elements, 1):
                                    try:
                                        period_text = period.text.strip()
                                        # –ò—â–µ–º —Å—á–µ—Ç —Ç–∏–ø–∞ "6-4" –∏–ª–∏ "7-6"
                                        scores = re.search(r'(\d+)[^\d]+(\d+)', period_text)
                                        if scores:
                                            home_score = scores.group(1)
                                            away_score = scores.group(2)
                                            games_stats[f'–°–µ—Ç {i}'] = {
                                                'home': home_score,
                                                'away': away_score
                                            }
                                            self.logger.info(f"–°–µ—Ç {i}: {home_score} - {away_score}")
                                    except Exception as e:
                                        self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–µ—Ä–∏–æ–¥–∞ {i}: {str(e)}")
                        except Exception as e:
                            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–µ—Ä–∏–æ–¥–æ–≤ –º–∞—Ç—á–∞: {str(e)}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≤–∫–ª–∞–¥–∫—É –æ–±–∑–æ—Ä–∞ –º–∞—Ç—á–∞: {str(e)}")

            total_time = time.time() - start_time
            self.logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–µ–π–º–∞–º –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")

            return games_stats

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≥–µ–π–º–∞–º: {str(e)}")
            traceback_str = traceback.format_exc()
            self.logger.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback_str}")
            return {}

    def parse_odds(self):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–∞—Ç—á–∞ - —É–ª—É—á—à–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥"""
        try:
            start_time = time.time()
            self.logger.info("–ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ cookie
            self.close_cookies_popup()

            # –ü–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏, –µ—Å–ª–∏ –æ–Ω–∞ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            try:
                self.logger.info("–ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏")

                # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –∏ –∫–ª–∏–∫–Ω—É—Ç—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É "–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã" —Å –ø–æ–º–æ—â—å—é JavaScript
                odds_tab_clicked = self.driver.execute_script("""
                    // –°–ø–∏—Å–æ–∫ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è –≤–∫–ª–∞–¥–∫–∏ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
                    const oddsTabs = [
                        'a[href*="#/odds"]',
                        'a[data-tab-id*="odds"]',
                        'a[data-tab="odds"]',
                        'a[class*="oddsTab"]',
                        'div[class*="tab"][class*="odds"]',
                        'a[href*="odds"]',
                        'li[data-tab="odds"]',
                        'button[data-tab="odds"]',
                        'a:contains("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")',
                        'a:contains("Odds")',
                        'div[class*="tab"]:contains("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã")',
                        'div[class*="tab"]:contains("Odds")'
                    ];

                    for (const selector of oddsTabs) {
                        try {
                            const tabs = document.querySelectorAll(selector);
                            for (const tab of tabs) {
                                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—Å—Ç –≤–∫–ª–∞–¥–∫–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏
                                const text = tab.textContent.toLowerCase();
                                if (text.includes('odds') || text.includes('–∫–æ—ç—Ñ—Ñ') || text.includes('—Å—Ç–∞–≤–∫')) {
                                    tab.click();
                                    return true;
                                }
                            }
                        } catch (e) {
                            // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–µ—Ä–µ–±–æ—Ä, –µ—Å–ª–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª
                            continue;
                        }
                    }

                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ —Ç–µ–∫—Å—Ç—É
                    const allLinks = document.querySelectorAll('a, div[role="tab"], li[role="tab"], button[role="tab"]');
                    for (const link of allLinks) {
                        const text = link.textContent.toLowerCase();
                        if (text.includes('odds') || text.includes('–∫–æ—ç—Ñ—Ñ') || text.includes('—Å—Ç–∞–≤–∫')) {
                            link.click();
                            return true;
                        }
                    }

                    return false;
                """)

                if odds_tab_clicked:
                    self.logger.info("–£—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞ –≤–∫–ª–∞–¥–∫–∞ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏")
                    # –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ –≤–∫–ª–∞–¥–∫–∏
                    time.sleep(2)
                else:
                    self.logger.info("–í–∫–ª–∞–¥–∫–∞ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –æ—Ç–∫—Ä—ã—Ç—å –≤–∫–ª–∞–¥–∫—É —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏: {str(e)}")

            odds_data = {}

            # –ù–û–í–´–ô –ú–ï–¢–û–î: –ü–∞—Ä—Å–∏–Ω–≥ —á–µ—Ä–µ–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é parse_odds_cell
            try:
                # –ü–æ–ª—É—á–∞–µ–º HTML —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                html_content = self.driver.page_source
                # –ü–∞—Ä—Å–∏–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏–∑ oddsCell__odd —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞
                odds_cell_data = self.parse_odds_cell(html_content)

                # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –¥–∞–Ω–Ω—ã–µ —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Ö
                if odds_cell_data and (odds_cell_data.get('home_odds') or odds_cell_data.get('away_odds')):
                    self.logger.info(
                        f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã —Å –ø–æ–º–æ—â—å—é –º–µ—Ç–æ–¥–∞ parse_odds_cell: {odds_cell_data}")
                    return odds_cell_data
                else:
                    self.logger.info("–ú–µ—Ç–æ–¥ parse_odds_cell –Ω–µ –Ω–∞—à–µ–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤")
            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –º–µ—Ç–æ–¥–∞ parse_odds_cell: {str(e)}")

            # –ï—Å–ª–∏ –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π –ø–æ–¥—Ö–æ–¥
            # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            try:
                self.logger.info("–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º")
                WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located((By.CSS_SELECTOR,
                                                    '.oddsValueInner, .oddsCell__odd, .oddsCell, div[class*="odds"], span[class*="odds"]'))
                )
                self.logger.info("–≠–ª–µ–º–µ–Ω—Ç—ã —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –Ω–∞–π–¥–µ–Ω—ã –ø–æ—Å–ª–µ –æ–∂–∏–¥–∞–Ω–∏—è")
            except Exception as e:
                self.logger.warning(f"Timeout –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–∞–∂–µ —Å —É–≤–µ–ª–∏—á–µ–Ω–Ω—ã–º —Ç–∞–π–º–∞—É—Ç–æ–º: {str(e)}")

            # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            try:
                screenshot_path = f"odds_parsing_debug_{int(time.time())}.png"
                self.driver.save_screenshot(screenshot_path)
                self.logger.info(f"–°–∫—Ä–∏–Ω—à–æ—Ç —Å—Ç—Ä–∞–Ω–∏—Ü—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏: {screenshot_path}")
            except Exception as e:
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {str(e)}")

            # –ë–æ–ª–µ–µ —Ç–æ—á–Ω—ã–π JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            js_odds = self.driver.execute_script("""
                var odds = {};

                function isValidOdds(value) {
                    var num = parseFloat(value);
                    return !isNaN(num) && num > 1.0 && num < 50.0 && value.length <= 6;
                }

                // –ü–æ–∏—Å–∫ –ø–æ —Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                var selectors = [
                    '.oddsValueInner',
                    '.oddsCell__odd',
                    '.oddsCell',
                    'div[class*="odds"][class*="value"]',
                    'span[class*="odds"][class*="value"]',
                    'div[class*="coefficient"]',
                    'span[class*="coefficient"]'
                ];

                var foundOdds = [];

                for (var i = 0; i < selectors.length && foundOdds.length < 2; i++) {
                    var elements = document.querySelectorAll(selectors[i]);
                    console.log('–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ ' + selectors[i] + ': –Ω–∞–π–¥–µ–Ω–æ ' + elements.length + ' —ç–ª–µ–º–µ–Ω—Ç–æ–≤');
                    for (var j = 0; j < elements.length; j++) {
                        var text = elements[j].textContent.trim().replace(/[^0-9.]/g, '');
                        if (isValidOdds(text)) {
                            foundOdds.push(text);
                            if (foundOdds.length >= 2) break;
                        }
                    }
                    if (foundOdds.length >= 2) break;
                }

                if (foundOdds.length >= 1) odds.home_odds = foundOdds[0];
                if (foundOdds.length >= 2) odds.away_odds = foundOdds[1];

                // –ü–æ–∏—Å–∫ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                var directionSelectors = [
                    'div[class*="direction"]',
                    'span[class*="arrow"]',
                    'div[class*="trend"]',
                    'span[class*="trend"]',
                    '.arrowUp-ico',
                    '.arrowDown-ico'
                ];

                for (var i = 0; i < directionSelectors.length; i++) {
                    var dirElements = document.querySelectorAll(directionSelectors[i]);
                    var dir = null;

                    for (var j = 0; j < Math.min(dirElements.length, 2); j++) {
                        var dirClass = dirElements[j].getAttribute('class') || '';

                        if (dirClass.toLowerCase().includes('up')) {
                            dir = 'up';
                        } else if (dirClass.toLowerCase().includes('down')) {
                            dir = 'down';
                        }

                        if (dir && j === 0 && odds.home_odds) {
                            odds.home_odds_direction = dir;
                        } else if (dir && j === 1 && odds.away_odds) {
                            odds.away_odds_direction = dir;
                        }
                    }
                }

                // –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ title
                var oddsElements = document.querySelectorAll('.oddsCell__odd');
                for (var i = 0; i < Math.min(oddsElements.length, 2); i++) {
                    var title = oddsElements[i].getAttribute('title') || '';
                    if (title && '¬ª' in title) {
                        var parts = title.split('¬ª');
                        if (parts.length === 2) {
                            var oldOdds = parts[0].trim().replace(/[^0-9.]/g, '');
                            if (i === 0 && oldOdds && isValidOdds(oldOdds)) {
                                odds.home_odds_old = oldOdds;
                            } else if (i === 1 && oldOdds && isValidOdds(oldOdds)) {
                                odds.away_odds_old = oldOdds;
                            }
                        }
                    }
                }

                odds.selector_info = '–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤: ' + selectors.length;
                return odds;
            """)

            if js_odds and (js_odds.get('home_odds') or js_odds.get('away_odds')):
                odds_data = js_odds
                self.logger.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –ø–æ–ª—É—á–µ–Ω—ã —á–µ—Ä–µ–∑ JS: {odds_data}")
            else:
                self.logger.info("JavaScript –Ω–µ –Ω–∞—à–µ–ª –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤, –ø—Ä–æ–±—É–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥")
                # –†–µ–∑–µ—Ä–≤–Ω—ã–π –º–µ—Ç–æ–¥ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º–∏
                try:
                    selectors = [
                        '.oddsValueInner',
                        '.oddsCell__odd',
                        '.oddsCell',
                        'div[class*="odds"][class*="value"]',
                        'span[class*="odds"][class*="value"]',
                        'div[class*="coefficient"]',
                        'span[class*="coefficient"]'
                    ]

                    for selector in selectors:
                        odds_elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                        self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞ {selector}: –Ω–∞–π–¥–µ–Ω–æ {len(odds_elements)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
                        if len(odds_elements) >= 2:
                            home_text = re.sub(r'[^0-9.]', '', odds_elements[0].text)
                            away_text = re.sub(r'[^0-9.]', '', odds_elements[1].text)

                            if home_text and self._is_valid_odds(home_text):
                                odds_data["home_odds"] = home_text
                                self.logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞: {home_text}")

                            if away_text and self._is_valid_odds(away_text):
                                odds_data["away_odds"] = away_text
                                self.logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {away_text}")

                            if odds_data.get("home_odds") and odds_data.get("away_odds"):
                                break
                        else:
                            self.logger.info(f"–°–µ–ª–µ–∫—Ç–æ—Ä {selector} –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")

                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –º–µ—Ç–æ–¥–æ–º 1: {str(e)}")

            # –£–ª—É—á—à–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            if odds_data.get('home_odds') and odds_data.get('away_odds'):
                home_odds = float(odds_data['home_odds'])
                away_odds = float(odds_data['away_odds'])

                # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—Ä–∞–≤–¥–æ–ø–æ–¥–æ–±–Ω–æ—Å—Ç—å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                if abs(home_odds - away_odds) > 20:
                    self.logger.warning("–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–∞—è —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏")
                    if not (1.01 <= home_odds <= 30 and 1.01 <= away_odds <= 30):
                        self.logger.error("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤–Ω–µ –¥–æ–ø—É—Å—Ç–∏–º–æ–≥–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞")
                        odds_data = {}

            total_time = time.time() - start_time
            odds_data["parse_time"] = total_time
            self.logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")

            return odds_data

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}")
            return {}

    def _is_valid_odds(self, odds_str):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞"""
        try:
            odds = float(odds_str)
            # –í–∞–ª–∏–¥–Ω—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –æ–±—ã—á–Ω–æ –±–æ–ª—å—à–µ 1.0 –∏ –º–µ–Ω—å—à–µ 50.0
            return 1.0 < odds < 50.0
        except (ValueError, TypeError):
            return False

    def close_cookies_popup(self):
        """–ú–µ—Ç–æ–¥ –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –≤–∏–¥–æ–≤ cookie-–±–∞–Ω–Ω–µ—Ä–æ–≤ –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω, –≤–∫–ª—é—á–∞—è –ø–æ–ø–∞–ø –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞ (JA/NEE)"""
        try:
            self.logger.info("–ü—ã—Ç–∞—é—Å—å –Ω–∞–π—Ç–∏ –∏ –∑–∞–∫—Ä—ã—Ç—å cookie-–±–∞–Ω–Ω–µ—Ä—ã –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞")

            # --- –ù–æ–≤—ã–π –±–ª–æ–∫ –¥–ª—è –ø–æ–ø–∞–ø–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–ª–µ—Ç–∏—è (JA/NEE) ---
            try:
                # –ò—â–µ–º –∫–Ω–æ–ø–∫—É —Å —Ç–µ–∫—Å—Ç–æ–º 'JA' (–î–∞)
                ja_buttons = self.driver.find_elements(By.XPATH, "//button[normalize-space(text())='JA']")
                for btn in ja_buttons:
                    if btn.is_displayed():
                        btn.click()
                        self.logger.info("–ö–ª–∏–∫–Ω—É–ª –ø–æ –∫–Ω–æ–ø–∫–µ 'JA' –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞")
                        time.sleep(0.5)
                        break
            except Exception as e:
                self.logger.warning(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å –ø–æ–ø–∞–ø –≤–æ–∑—Ä–∞—Å—Ç–∞: {e}')

            # –°–ø–∏—Å–æ–∫ –æ–±—â–∏—Ö —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–≤ –¥–ª—è cookie-–±–∞–Ω–Ω–µ—Ä–æ–≤ –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω
            common_selectors = [
                # Cookie –±–∞–Ω–Ω–µ—Ä—ã - –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è/—Å–æ–≥–ª–∞—Å–∏—è
                "button[data-testid='cookie-policy-dialog-accept']",
                "button[data-testid='banner-accept']",
                "button.cookie-consent__agree",
                "button.consent-give",
                "button#accept-cookies",
                "button#onetrust-accept-btn-handler",
                "a#cookie_action_close_header",
                ".cookie-banner .close-button",
                ".cookie-banner .accept-button",
                ".cookie-consent .accept-cookies",
                ".cookie-popup .accept-all",
                "div[class*='cookie'] button[class*='accept']",
                "div[class*='cookie'] button[class*='close']",
                "div[class*='cookie'] a[class*='accept']",

                # –í—Å–ø–ª—ã–≤–∞—é—â–∏–µ –æ–∫–Ω–∞ - –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                "button.popup-close",
                "button.modal-close",
                "button.close-modal",
                "a.popup-close",
                ".modal .close",
                ".modal .close-btn",
                ".popup .close-button",
                "[data-dismiss='modal']",
                "[aria-label='Close']",
                ".modal-header .close",

                # –ò–∫–æ–Ω–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è
                ".fa-times",
                ".fa-close",
                ".close-icon",
                ".modal-close-icon"
            ]

            # –ü–æ–∏—Å–∫ –∏ –∫–ª–∏–∫ –ø–æ –≤—Å–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–∞–º –∑–∞–∫—Ä—ã—Ç–∏—è
            for selector in common_selectors:
                try:
                    elements = self.driver.find_elements(By.CSS_SELECTOR, selector)
                    for element in elements:
                        if element.is_displayed():
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω –≤–∏–¥–∏–º—ã–π —ç–ª–µ–º–µ–Ω—Ç –¥–ª—è –∑–∞–∫—Ä—ã—Ç–∏—è: {selector}")
                            try:
                                element.click()
                                self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç: {selector}")
                                time.sleep(0.3)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É –∫–ª–∏–∫–∞
                            except Exception as click_error:
                                self.logger.debug(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∫–ª–∏–∫–Ω—É—Ç—å –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É {selector}: {str(click_error)}")
                                try:
                                    # –ü—Ä–æ–±—É–µ–º —á–µ—Ä–µ–∑ JavaScript
                                    self.driver.execute_script("arguments[0].click();", element)
                                    self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ JavaScript: {selector}")
                                    time.sleep(0.3)
                                except Exception as js_error:
                                    self.logger.debug(
                                        f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å —ç–ª–µ–º–µ–Ω—Ç —á–µ—Ä–µ–∑ JavaScript {selector}: {str(js_error)}")
                except Exception as selector_error:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —ç–ª–µ–º–µ–Ω—Ç–∞ {selector}: {str(selector_error)}")

            # –£–¥–∞–ª–µ–Ω–∏–µ cookie-–±–∞–Ω–Ω–µ—Ä–æ–≤ —á–µ—Ä–µ–∑ JavaScript (–¥–ª—è —Å–ª—É—á–∞–µ–≤, –∫–æ–≥–¥–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ–π –∫–Ω–æ–ø–∫–∏ –∑–∞–∫—Ä—ã—Ç–∏—è)
            self.driver.execute_script("""
                // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å cookie-–±–∞–Ω–Ω–µ—Ä–∞–º–∏
                var elements = document.querySelectorAll('div[class*="cookie"], div[class*="Cookie"], div[id*="cookie"], div[id*="Cookie"], div[class*="popup"], div[class*="modal"], div[aria-label*="cookie"], div[aria-label*="Cookie"]');

                elements.forEach(function(element) {
                    // –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤–∏–¥–µ–Ω –∏ –∏–º–µ–µ—Ç —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ–µ
                    var style = window.getComputedStyle(element);
                    if ((style.position === 'fixed' || style.position === 'absolute') && 
                        style.display !== 'none' && 
                        style.visibility !== 'hidden' &&
                        element.offsetWidth > 0 && 
                        element.offsetHeight > 0) {

                        // –°–∫—Ä—ã–≤–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç
                        element.style.display = 'none';
                        element.style.opacity = '0';
                        element.style.visibility = 'hidden';
                        element.style.pointerEvents = 'none';

                        console.log('–°–∫—Ä—ã—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–π cookie-–±–∞–Ω–Ω–µ—Ä:', element);
                    }
                });

                // –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü—ã, –∫–æ—Ç–æ—Ä–∞—è –º–æ–≥–ª–∞ –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –±–∞–Ω–Ω–µ—Ä–∞–º–∏
                document.body.style.overflow = 'auto';
                document.documentElement.style.overflow = 'auto';
            """)

            self.logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö cookie-–±–∞–Ω–Ω–µ—Ä–æ–≤ –∏ –≤—Å–ø–ª—ã–≤–∞—é—â–∏—Ö –æ–∫–æ–Ω")

        except Exception as e:
            self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å cookie-–±–∞–Ω–Ω–µ—Ä—ã: {str(e)}")

    def _find_bootstrap_buttons(self, driver):
        """–ò—â–µ—Ç –∫–Ω–æ–ø–∫–∏ —Å Bootstrap-–∫–ª–∞—Å—Å–∞–º–∏

        Args:
            driver: WebDriver –¥–ª—è –ø–æ–∏—Å–∫–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤

        Returns:
            list: –°–ø–∏—Å–æ–∫ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∫–Ω–æ–ø–æ–∫
        """
        bootstrap_selectors = [
            ".btn-primary", ".btn-secondary", ".btn-success", ".btn-info",
            ".btn-warning", ".btn-danger", ".btn-light", ".btn-dark",
            ".btn-outline-primary", ".btn-outline-secondary", ".btn-outline-success",
            ".btn-outline-info", ".btn-outline-warning", ".btn-outline-danger",
            ".btn-outline-light", ".btn-outline-dark",
            ".btn-lg", ".btn-sm", ".btn-block"
        ]

        result = []
        for selector in bootstrap_selectors:
            try:
                buttons = driver.find_elements(By.CSS_SELECTOR, selector)
                if buttons:
                    result.extend(buttons)
            except Exception as e:
                self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –∫–Ω–æ–ø–æ–∫ —Å Bootstrap —Å–µ–ª–µ–∫—Ç–æ—Ä–æ–º '{selector}': {str(e)}")

        return result

    def safe_click(self, element, max_attempts=3):
        """–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∫–ª–∏–∫ –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∞ –∫–ª–∏–∫–∞

        Args:
            element: –≠–ª–µ–º–µ–Ω—Ç, –ø–æ –∫–æ—Ç–æ—Ä–æ–º—É –Ω—É–∂–Ω–æ –∫–ª–∏–∫–Ω—É—Ç—å
            max_attempts: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫ –∫–ª–∏–∫–∞

        Returns:
            bool: True –µ—Å–ª–∏ –∫–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
        """
        for attempt in range(max_attempts):
            try:
                self.logger.debug(f"–ü–æ–ø—ã—Ç–∫–∞ –∫–ª–∏–∫–∞ {attempt + 1}/{max_attempts}")

                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ —ç–ª–µ–º–µ–Ω—Ç—É –¥–ª—è –±–æ–ª—å—à–µ–π –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏ –∫–ª–∏–∫–∞
                try:
                    self.driver.execute_script("arguments[0].scrollIntoView({block: 'center'});", element)
                    time.sleep(0.2)  # –ö–æ—Ä–æ—Ç–∫–∞—è –ø–∞—É–∑–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                except Exception as e:
                    self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∫ —ç–ª–µ–º–µ–Ω—Ç—É: {str(e)}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∏–¥–µ–Ω –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –∏ –º–æ–∂–Ω–æ –ª–∏ –ø–æ –Ω–µ–º—É –∫–ª–∏–∫–Ω—É—Ç—å
                if not element.is_displayed():
                    self.logger.warning("–≠–ª–µ–º–µ–Ω—Ç –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ—Ç—Å—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ")
                    time.sleep(0.3)
                    continue

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–µ—Ä–µ–∫—Ä—ã—Ç –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
                is_clickable = self.driver.execute_script("""
                    var elem = arguments[0];
                    var rect = elem.getBoundingClientRect();
                    var cx = rect.left + rect.width / 2;
                    var cy = rect.top + rect.height / 2;
                    var elemAtPoint = document.elementFromPoint(cx, cy);
                    return elem.contains(elemAtPoint) || elemAtPoint.contains(elem);
                """, element)

                if not is_clickable:
                    self.logger.warning("–≠–ª–µ–º–µ–Ω—Ç –ø–µ—Ä–µ–∫—Ä—ã—Ç –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏, –ø—Ä–æ–±—É—é —É–¥–∞–ª–∏—Ç—å –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–µ")
                    self.driver.execute_script("""
                        var elem = arguments[0];
                        var rect = elem.getBoundingClientRect();
                        var cx = rect.left + rect.width / 2;
                        var cy = rect.top + rect.height / 2;
                        var elemAtPoint = document.elementFromPoint(cx, cy);
                        if (elemAtPoint && elemAtPoint !== elem) {
                            try {
                                elemAtPoint.style.pointerEvents = 'none';
                                elemAtPoint.style.opacity = '0.5';
                            } catch(e) {}
                        }
                    """, element)
                    time.sleep(0.3)

                # –ü—Ä–æ–±—É–µ–º –∫–ª–∏–∫–Ω—É—Ç—å
                element.click()
                self.logger.info("–ö–ª–∏–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ")
                return True

            except Exception as e:
                error_text = str(e).lower()
                self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–ª–∏–∫–µ (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{max_attempts}): {str(e)}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ç–∏–ø—ã –æ—à–∏–±–æ–∫
                if any(keyword in error_text for keyword in
                       ["intercepted", "–¥—Ä—É–≥–æ–π —ç–ª–µ–º–µ–Ω—Ç", "–ø–µ—Ä–µ—Ö–≤–∞—á–µ–Ω", "element click", "would receive the click",
                        "intercept", "element in the way"]):
                    self.logger.info("–û–±–Ω–∞—Ä—É–∂–µ–Ω –ø–µ—Ä–µ—Ö–≤–∞—Ç –∫–ª–∏–∫–∞, –ø—ã—Ç–∞—é—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å")

                    # 1. –ó–∞–∫—Ä—ã—Ç–∏–µ cookie-–±–∞–Ω–Ω–µ—Ä–æ–≤
                    try:
                        self.close_cookies_popup()
                        time.sleep(0.5)
                    except Exception as cookie_error:
                        self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ø—ã—Ç–∫–µ –∑–∞–∫—Ä—ã—Ç—å cookie-–±–∞–Ω–Ω–µ—Ä: {str(cookie_error)}")

                    # 2. –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π —á–µ—Ä–µ–∑ JavaScript
                    try:
                        self.driver.execute_script("""
                            // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã —Å position:fixed –∏–ª–∏ position:absolute, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–µ—Ä–µ–∫—Ä—ã–≤–∞—Ç—å –∫–ª–∏–∫
                            var overlays = Array.from(document.querySelectorAll('*')).filter(el => {
                                var style = window.getComputedStyle(el);
                                return (style.position === 'fixed' || style.position === 'absolute') &&
                                       style.display !== 'none' &&
                                       style.visibility !== 'hidden' &&
                                       el.offsetWidth > 0 &&
                                       el.offsetHeight > 0;
                            });

                            // –í—Ä–µ–º–µ–Ω–Ω–æ —É–±–∏—Ä–∞–µ–º —ç—Ç–∏ —ç–ª–µ–º–µ–Ω—Ç—ã –∏–∑ –ø–æ—Ç–æ–∫–∞
                            overlays.forEach(function(overlay) {
                                overlay.setAttribute('data-original-z-index', overlay.style.zIndex);
                                overlay.setAttribute('data-original-display', overlay.style.display);
                                overlay.style.zIndex = '-1';
                                overlay.style.pointerEvents = 'none';
                            });

                            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Ä—É—Ç–∫—É —Å—Ç—Ä–∞–Ω–∏—Ü—ã
                            document.body.style.overflow = 'auto';
                            document.documentElement.style.overflow = 'auto';

                            return overlays.length;
                        """)
                        time.sleep(0.3)
                    except Exception as js_error:
                        self.logger.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–µ—Ä–µ–∫—Ä—ã—Ç–∏–π: {str(js_error)}")

                # –ï—Å–ª–∏ —ç–ª–µ–º–µ–Ω—Ç —Å—Ç–∞–ª —É—Å—Ç–∞—Ä–µ–≤—à–∏–º/–Ω–µ–∞–∫—Ç—É–∞–ª—å–Ω—ã–º
                elif "stale" in error_text or "no such element" in error_text or "not attached" in error_text:
                    self.logger.warning("–≠–ª–µ–º–µ–Ω—Ç —É—Å—Ç–∞—Ä–µ–ª –∏–ª–∏ –±–æ–ª—å—à–µ –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ DOM, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏ –∫–ª–∏–∫–∞")
                    return False

                # –ï—Å–ª–∏ –º–µ–¥–ª–µ–Ω–Ω–æ–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏–ª–∏ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –µ—â–µ –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è
                elif "timeout" in error_text or "wait" in error_text:
                    self.logger.info("–¢–∞–π–º–∞—É—Ç, –¥–µ–ª–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –ø–∞—É–∑—É")
                    time.sleep(1.0)  # –ë–æ–ª–µ–µ –¥–ª–∏–Ω–Ω–∞—è –ø–∞—É–∑–∞ –ø—Ä–∏ –ø—Ä–æ–±–ª–µ–º–∞—Ö —Å –æ–∂–∏–¥–∞–Ω–∏–µ–º

                # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ JavaScript-–º–µ—Ç–æ–¥—ã –∫–ª–∏–∫–∞
                if attempt == max_attempts - 1:
                    self.logger.info("–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞, –ø—Ä–æ–±—É—é —Ä–∞–∑–Ω—ã–µ –ø–æ–¥—Ö–æ–¥—ã —á–µ—Ä–µ–∑ JavaScript")

                    # 1. –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π JavaScript –∫–ª–∏–∫
                    try:
                        self.logger.info("–ü—Ä–æ–±—É—é –ø—Ä—è–º–æ–π JavaScript –∫–ª–∏–∫")
                        self.driver.execute_script("arguments[0].click();", element)
                        self.logger.info("JavaScript –∫–ª–∏–∫ —É—Å–ø–µ—à–µ–Ω")
                        return True
                    except Exception as js_error:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ JavaScript –∫–ª–∏–∫–µ: {str(js_error)}")

                    # 2. –°–æ–∑–¥–∞–Ω–∏–µ –∏ —ç–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞
                    try:
                        self.logger.info("–ü—Ä–æ–±—É—é —ç–º—É–ª—è—Ü–∏—é —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞")
                        self.driver.execute_script("""
                            var elem = arguments[0];
                            var evt = new MouseEvent('click', {
                                bubbles: true,
                                cancelable: true,
                                view: window
                            });
                            elem.dispatchEvent(evt);
                        """, element)
                        self.logger.info("–≠–º—É–ª—è—Ü–∏—è —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞ —É—Å–ø–µ—à–Ω–∞")
                        return True
                    except Exception as event_error:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–º—É–ª—è—Ü–∏–∏ —Å–æ–±—ã—Ç–∏—è –∫–ª–∏–∫–∞: {str(event_error)}")

                    # 3. –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è, —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ —Å —ç–ª–µ–º–µ–Ω—Ç–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ —Å—Å—ã–ª–∫–µ)
                    try:
                        tag_name = element.tag_name.lower()
                        if tag_name == 'a' and element.get_attribute('href'):
                            href = element.get_attribute('href')
                            self.logger.info(f"–≠–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —Å—Å—ã–ª–∫–æ–π, –ø—Ä–æ–±—É—é –ø–µ—Ä–µ–π—Ç–∏ –ø–æ –Ω–µ–π: {href}")
                            self.driver.get(href)
                            return True
                        elif tag_name == 'button' or tag_name == 'input':
                            form = self.driver.execute_script("return arguments[0].form;", element)
                            if form:
                                self.logger.info("–≠–ª–µ–º–µ–Ω—Ç —è–≤–ª—è–µ—Ç—Å—è —á–∞—Å—Ç—å—é —Ñ–æ—Ä–º—ã, –ø—Ä–æ–±—É—é –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ä–º—É")
                                self.driver.execute_script("arguments[0].submit();", form)
                                return True
                    except Exception as alt_action_error:
                        self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è: {str(alt_action_error)}")

                time.sleep(0.7)  # –£–≤–µ–ª–∏—á–µ–Ω–Ω–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –ø–æ–ø—ã—Ç–∫–∞–º–∏ –¥–ª—è –ª—É—á—à–µ–π —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç–∏

        self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–ª–∏–∫ –ø–æ—Å–ª–µ {max_attempts} –ø–æ–ø—ã—Ç–æ–∫")
        return False

    def format_stats_message(self, match_data, is_favorite=False):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π –º–∞—Ç—á–∞"""
        home = match_data.get('home_player', '?')
        away = match_data.get('away_player', '?')
        odds = match_data.get('odds', {})
        serve_stats = match_data.get('serve_stats', {})
        score = match_data.get('score', {})

        msg = []
        if is_favorite:
            msg.append("<b>üéæ –ù–∞–π–¥–µ–Ω —Ñ–∞–≤–æ—Ä–∏—Ç!</b>\n")

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        msg.append(f"<b>–ú–∞—Ç—á:</b> {home} vs {away}")

        # –°—á–µ—Ç –º–∞—Ç—á–∞
        if score:
            if 'sets' in score:
                msg.append(f"<b>–°—á–µ—Ç –ø–æ —Å–µ—Ç–∞–º:</b> {score['sets']}")
            if 'current_set' in score:
                msg.append(f"<b>–¢–µ–∫—É—â–∏–π —Å–µ—Ç:</b> {score['current_set']}")
            if 'current_game' in score:
                msg.append(f"<b>–¢–µ–∫—É—â–∏–π –≥–µ–π–º:</b> {score['current_game']}")

        # –ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        if odds:
            msg.append("\n<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã:</b>")
            if 'home_odds' in odds:
                direction = odds.get('home_odds_direction', '')
                direction_arrow = '‚Üë' if direction == 'up' else '‚Üì' if direction == 'down' else ''
                msg.append(f"‚Ä¢ {home}: {odds['home_odds']}{direction_arrow}")
            if 'away_odds' in odds:
                direction = odds.get('away_odds_direction', '')
                direction_arrow = '‚Üë' if direction == 'up' else '‚Üì' if direction == 'down' else ''
                msg.append(f"‚Ä¢ {away}: {odds['away_odds']}{direction_arrow}")
            if 'home_odds_original' in odds:
                msg.append(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π {home}: {odds['home_odds_original']}")
            if 'away_odds_original' in odds:
                msg.append(f"‚Ä¢ –ù–∞—á–∞–ª—å–Ω—ã–π {away}: {odds['away_odds_original']}")

        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏
        if serve_stats:
            msg.append("\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏:</b>")
            for key, values in serve_stats.items():
                if isinstance(values, dict):
                    home_val = values.get('home', '?')
                    away_val = values.get('away', '?')

                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏—è, –µ—Å–ª–∏ –æ–Ω–∏ —Å–æ–¥–µ—Ä–∂–∞—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                    if isinstance(home_val, dict):
                        home_details = home_val.get('details', '')
                        home_val = f"{home_val.get('value', '?')} ({home_details})" if home_details else home_val.get(
                            'value', '?')
                    if isinstance(away_val, dict):
                        away_details = away_val.get('details', '')
                        away_val = f"{away_val.get('value', '?')} ({away_details})" if away_details else away_val.get(
                            'value', '?')

                    msg.append(f"‚Ä¢ {key}:")
                    msg.append(f"  {home}: {home_val}")
                    msg.append(f"  {away}: {away_val}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á
        if 'url' in match_data:
            msg.append(f"\n<a href='{match_data['url']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á</a>")

        return '\n'.join(msg)

    def format_favorite_message(self, match_data, fav):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ñ–∞–≤–æ—Ä–∏—Ç–µ –≤ –∫–æ–º–ø–∞–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ –ø–æ –Ω–æ–≤–æ–º—É —à–∞–±–ª–æ–Ω—É"""
        home = match_data.get('home_player', '?')
        away = match_data.get('away_player', '?')
        url = match_data.get('url', '')

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫—Ç–æ —Ñ–∞–≤–æ—Ä–∏—Ç
        favorite_side = fav.get('side', '')
        is_home_favorite = favorite_side == 'home'
        favorite_player = home if is_home_favorite else away

        # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É –æ –ø–æ–Ω–∏–∂–µ–Ω–Ω—ã—Ö –∫—Ä–∏—Ç–µ—Ä–∏—è—Ö
        note = ' (–ø–æ–Ω–∏–∂–µ–Ω–Ω—ã–µ –∫—Ä–∏—Ç–µ—Ä–∏–∏)' if 'note' in fav else ''

        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–æ–≤ –¥–ª—è —Ñ–∞–≤–æ—Ä–∏—Ç–∞
        games_stats = self.extract_games_stats(match_data, favorite_side)

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        msg_lines = [
            f"<b>–ú–∞—Ç—á:</b> {home} vs {away}",
            f"<b>–§–∞–≤–æ—Ä–∏—Ç:</b>{note} {favorite_player}",
            f"<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {fav.get('odds', '0.0')}",
            f"<b>% –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏:</b> {fav.get('first_serve', 0.0)}%",
            f"<b>% –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ:</b> {fav.get('first_serve_points', 0.0)}%",
            f"<b>–ì–µ–π–º—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞:</b>",
            f"{games_stats}",
            f"<a href='{url}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á</a>"
        ]

        return '\n'.join(msg_lines)

    def extract_games_stats(self, match_data, favorite_side):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –≥–µ–π–º–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π —Å—Ç–æ—Ä–æ–Ω—ã"""
        games_stats = match_data.get('games_stats', {})

        # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –≥–µ–π–º–∞—Ö, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not games_stats:
            return "–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö"

        # –ò—â–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –≥–µ–π–º–∞—Ö
        games_won = 0
        total_games = 0
        games_percent = "0"

        opponent_games_won = 0
        opponent_total_games = 0
        opponent_games_percent = "0"

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–µ–π–º–∞–º –≤ —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö
        for key, value in games_stats.items():
            if isinstance(value, dict) and favorite_side in value:
                if '–°–µ—Ç' in key:
                    try:
                        fav_score = int(value.get(favorite_side, 0))
                        opp_score = int(value.get('away' if favorite_side == 'home' else 'home', 0))
                        games_won += fav_score
                        total_games += fav_score + opp_score
                        opponent_games_won += opp_score
                        opponent_total_games += fav_score + opp_score
                    except (ValueError, TypeError):
                        pass

        # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ—Ü–µ–Ω—Ç—ã, –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ
        if total_games > 0:
            games_percent = f"{(games_won / total_games) * 100:.0f}"
            opponent_games_percent = f"{(opponent_games_won / opponent_total_games) * 100:.0f}"

        return f"–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –≥–µ–π–º–æ–≤: {games_won}/{total_games} ({games_percent}%) | —Å–æ–ø–µ—Ä–Ω–∏–∫: {opponent_games_won}/{opponent_total_games} ({opponent_games_percent}%)"

    async def filter_and_send_favorites(self, live_matches, telegram_bot, chat_id):
        self.logger.info(f"–ù–∞—á–∏–Ω–∞—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤ –∏–∑ {len(live_matches)} –º–∞—Ç—á–µ–π")
        
        # --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –î–ê–ù–ù–´–ú–ò ---
        def match_score(match):
            """–°—á–∏—Ç–∞–µ—Ç —Å—É–º–º—É: –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç + % –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏ + % –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ"""
            try:
                odds = float(match.get('odds', 0))
                first_serve = float(match.get('first_serve', 0))
                first_serve_points = float(match.get('first_serve_points', 0))
                return odds + first_serve + first_serve_points
            except Exception:
                return 0
        
        # --- –õ–ò–ú–ò–¢ –ö–û–õ–ò–ß–ï–°–¢–í–ê –§–ê–í–û–†–ò–¢–û–í ---
        MAX_FAVORITES = 3  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        
        # --- –°–ë–û–† –ö–ê–ù–î–ò–î–ê–¢–û–í –ü–û –°–¢–†–û–ì–û–ú–£ –§–ò–õ–¨–¢–†–£ ---
        strict_filtered = []  # –ú–∞—Ç—á–∏, –ø—Ä–æ—à–µ–¥—à–∏–µ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
        candidates = []       # –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –¥–æ–±–æ—Ä–∞ (—Å –∫–æ—ç—Ñ >= 2.3 –∏ –Ω–∞–ª–∏—á–∏–µ–º –æ–±–æ–∏—Ö –ø—Ä–æ—Ü–µ–Ω—Ç–æ–≤)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É –≤—Å–µ—Ö –º–∞—Ç—á–µ–π –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∏ —Å–æ–±–∏—Ä–∞–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–æ—Ä–∞
        for match_idx, match in enumerate(live_matches, 1):
            try:
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ –º–∞—Ç—á–∞
                home_odds = None
                away_odds = None
                home_first_serve = None
                home_first_serve_won = None
                away_first_serve = None
                away_first_serve_won = None
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
                home = match.get('home_player', '?')
                away = match.get('away_player', '?')
                url = match.get('url', '')
                
                # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –º–∞—Ç—á–∞
                self.logger.info(f"–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–∞ {match_idx}: {home} vs {away}")
                
                # --- –ü–û–õ–£–ß–ê–ï–ú –ö–û–≠–§–§–ò–¶–ò–ï–ù–¢–´ ---
                odds = match.get('odds', {})
                koef = match.get('–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã', {})
                
                # –î–ª—è –æ—Ç–ª–∞–¥–∫–∏: –≤—ã–≤–æ–¥ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
                self.logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ {home} vs {away}: {odds}")
                if koef:
                    self.logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã': {koef}")
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è home
                for key in ['home_odds', 'home', '1']:
                    if key in odds and odds[key]:
                        try:
                            home_odds = float(str(odds[key]).replace(',', '.'))
                            break
                        except:
                            continue
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –∏—â–µ–º –≤ '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã'
                if home_odds is None and koef:
                    home_koef = koef.get('–∏–≥—Ä–æ–∫_1', {}).get('–∑–Ω–∞—á–µ–Ω–∏–µ')
                    if home_koef and home_koef != '–Ω/–¥':
                        try:
                            home_odds = float(str(home_koef).replace(',', '.'))
                            self.logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞ 1 –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã': {home_odds}")
                        except:
                            pass
                
                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è away
                for key in ['away_odds', 'away', '2']:
                    if key in odds and odds[key]:
                        try:
                            away_odds = float(str(odds[key]).replace(',', '.'))
                            break
                        except:
                            continue
                
                # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ, –∏—â–µ–º –≤ '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã'
                if away_odds is None and koef:
                    away_koef = koef.get('–∏–≥—Ä–æ–∫_2', {}).get('–∑–Ω–∞—á–µ–Ω–∏–µ')
                    if away_koef and away_koef != '–Ω/–¥':
                        try:
                            away_odds = float(str(away_koef).replace(',', '.'))
                            self.logger.info(f"–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∏–≥—Ä–æ–∫–∞ 2 –∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã '–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã': {away_odds}")
                        except:
                            pass
                
                # --- –ü–û–õ–£–ß–ê–ï–ú –°–¢–ê–¢–ò–°–¢–ò–ö–£ –ü–û–î–ê–ß–ò ---
                serve_stats = match.get('serve_stats', {})
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∞—á–∏ –¥–ª—è home
                if serve_stats:
                    for key, value in serve_stats.items():
                        if not isinstance(value, dict):
                            continue
                        
                        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è home
                        side_value = value.get('home')
                        if not isinstance(side_value, (dict, str)):
                            continue
                            
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if isinstance(side_value, str):
                            side_value = {'value': side_value}
                            
                        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        val = side_value.get('value', side_value.get('percent', '0'))
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                        if isinstance(val, str):
                            val = val.replace('%', '').replace(',', '.')
                            try:
                                val = float(val)
                            except:
                                continue
                                
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª—é—á—É
                        key_lower = key.lower()
                        if '–ø–µ—Ä–≤' in key_lower or '1-—è' in key_lower or 'first' in key_lower:
                            if home_first_serve is None or val > home_first_serve:
                                home_first_serve = val
                        elif '–≤—ã–∏–≥—Ä' in key_lower or 'won' in key_lower or 'win' in key_lower:
                            if home_first_serve_won is None or val > home_first_serve_won:
                                home_first_serve_won = val
                
                # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∞—á–∏ –¥–ª—è away
                if serve_stats:
                    for key, value in serve_stats.items():
                        if not isinstance(value, dict):
                            continue
                            
                        # –ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è away
                        side_value = value.get('away')
                        if not isinstance(side_value, (dict, str)):
                            continue
                            
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ —Å–ª–æ–≤–∞—Ä—å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if isinstance(side_value, str):
                            side_value = {'value': side_value}
                            
                        # –ü–æ–ª—É—á–∞–µ–º —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                        val = side_value.get('value', side_value.get('percent', '0'))
                        
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                        if isinstance(val, str):
                            val = val.replace('%', '').replace(',', '.')
                            try:
                                val = float(val)
                            except:
                                continue
                                
                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –∫–ª—é—á—É
                        key_lower = key.lower()
                        if '–ø–µ—Ä–≤' in key_lower or '1-—è' in key_lower or 'first' in key_lower:
                            if away_first_serve is None or val > away_first_serve:
                                away_first_serve = val
                        elif '–≤—ã–∏–≥—Ä' in key_lower or 'won' in key_lower or 'win' in key_lower:
                            if away_first_serve_won is None or val > away_first_serve_won:
                                away_first_serve_won = val
                
                # --- –ü–†–û–í–ï–†–Ø–ï–ú –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø HOME ---
                if home_odds is not None and home_first_serve is not None and home_first_serve_won is not None:
                    self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è {home}: –∫–æ—ç—Ñ={home_odds}, 1-—è –ø–æ–¥–∞—á–∞={home_first_serve}, –≤—ã–∏–≥—Ä—ã—à–∏={home_first_serve_won}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
                    if home_odds > 2.2 and home_first_serve > 60 and home_first_serve_won > 60:
                        self.logger.info(f"–ü–†–û–®–ï–õ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä: {home}")
                        strict_filtered.append({
                            'side': 'home',
                            'player': home,
                            'opponent': away,
                            'odds': home_odds,
                            'first_serve': home_first_serve,
                            'first_serve_points': home_first_serve_won,
                            'url': url
                        })
                    else:
                        self.logger.info(f"–ù–ï –ü–†–û–®–ï–õ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä: {home}")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–¥–æ–±–æ—Ä–∞)
                    if home_odds >= 2.3:
                        self.logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {home}, —Å—É–º–º–∞ = {home_odds + home_first_serve + home_first_serve_won}")
                        candidates.append({
                            'side': 'home',
                            'player': home,
                            'opponent': away,
                            'odds': home_odds,
                            'first_serve': home_first_serve,
                            'first_serve_points': home_first_serve_won,
                            'url': url
                        })
                    else:
                        self.logger.info(f"–ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {home}, –∫–æ—ç—Ñ={home_odds} < 2.3")
                
                # --- –ü–†–û–í–ï–†–Ø–ï–ú –ö–†–ò–¢–ï–†–ò–ò –î–õ–Ø AWAY ---
                if away_odds is not None and away_first_serve is not None and away_first_serve_won is not None:
                    self.logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—Ä–∏—Ç–µ—Ä–∏–µ–≤ –¥–ª—è {away}: –∫–æ—ç—Ñ={away_odds}, 1-—è –ø–æ–¥–∞—á–∞={away_first_serve}, –≤—ã–∏–≥—Ä—ã—à–∏={away_first_serve_won}")
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ —Å—Ç—Ä–æ–≥–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
                    if away_odds > 2.2 and away_first_serve > 60 and away_first_serve_won > 60:
                        self.logger.info(f"–ü–†–û–®–ï–õ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä: {away}")
                        strict_filtered.append({
                            'side': 'away',
                            'player': away,
                            'opponent': home,
                            'odds': away_odds,
                            'first_serve': away_first_serve,
                            'first_serve_points': away_first_serve_won,
                            'url': url
                        })
                    else:
                        self.logger.info(f"–ù–ï –ü–†–û–®–ï–õ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä: {away}")
                        
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–µ—Ä–∏–∏ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ (–¥–æ–±–æ—Ä–∞)
                    if away_odds >= 2.3:
                        self.logger.info(f"–î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {away}, —Å—É–º–º–∞ = {away_odds + away_first_serve + away_first_serve_won}")
                        candidates.append({
                            'side': 'away',
                            'player': away,
                            'opponent': home,
                            'odds': away_odds,
                            'first_serve': away_first_serve,
                            'first_serve_points': away_first_serve_won,
                            'url': url
                        })
                    else:
                        self.logger.info(f"–ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã: {away}, –∫–æ—ç—Ñ={away_odds} < 2.3")

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ {match_idx}: {str(e)}")
        
        self.logger.info(f"–ü–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞–π–¥–µ–Ω–æ {len(strict_filtered)} –º–∞—Ç—á–µ–π")
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–æ—Ä–∞")
        
        # –£–¥–∞–ª—è–µ–º –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Ç–µ –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –ø—Ä–æ—à–ª–∏ —Å—Ç—Ä–æ–≥–∏–π —Ñ–∏–ª—å—Ç—Ä
        def is_same_match(a, b):
            """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –æ—Ç–Ω–æ—Å—è—Ç—Å—è –ª–∏ –¥–≤–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ –∫ –æ–¥–Ω–æ–º—É –∏ —Ç–æ–º—É –∂–µ –º–∞—Ç—á—É"""
            return a['player'] == b['player'] and a['opponent'] == b['opponent'] and a['side'] == b['side']
            
        filtered_candidates = []
        for cand in candidates:
            is_already_filtered = False
            for sf in strict_filtered:
                if is_same_match(cand, sf):
                    is_already_filtered = True
                    break
            if not is_already_filtered:
                filtered_candidates.append(cand)
        
        candidates = filtered_candidates
        self.logger.info(f"–ü–æ—Å–ª–µ —É–¥–∞–ª–µ–Ω–∏—è –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –æ—Å—Ç–∞–ª–æ—Å—å {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–ª—è –¥–æ–±–æ—Ä–∞")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –ø–æ —Å—É–º–º–µ: –∫–æ—ç—Ñ + % –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏ + % –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ
        candidates.sort(key=match_score, reverse=True)
        
        # --- –õ–û–ì–ò–ö–ê –û–¢–ë–û–†–ê –¢–û–ü-3 –§–ê–í–û–†–ò–¢–û–í ---
        filtered = []
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–∞–≤–∏–ª–∞ –æ—Ç–±–æ—Ä–∞:
        if len(strict_filtered) >= MAX_FAVORITES:
            # –ï—Å–ª–∏ –ø–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞—à–ª–æ—Å—å 3 –∏ –±–æ–ª–µ–µ –º–∞—Ç—á–∞ - –±–µ—Ä–µ–º —Ç–æ–ø-3 –∏–∑ –Ω–∏—Ö
            strict_filtered.sort(key=lambda x: x['odds'], reverse=True)
            filtered = strict_filtered[:MAX_FAVORITES]
            self.logger.info(f"–ü–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞–π–¥–µ–Ω–æ {len(strict_filtered)}+ –º–∞—Ç—á–µ–π, –±–µ—Ä–µ–º —Ç–æ–ø-{MAX_FAVORITES} –∏–∑ –Ω–∏—Ö")
        elif len(strict_filtered) == 2:
            # –ï—Å–ª–∏ –ø–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞—à–ª–æ—Å—å 2 –º–∞—Ç—á–∞ - –¥–æ–±–∏—Ä–∞–µ–º 1 –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            filtered = strict_filtered + candidates[:1]
            self.logger.info("–ü–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞–π–¥–µ–Ω–æ 2 –º–∞—Ç—á–∞, –¥–æ–±–∏—Ä–∞–µ–º 1 –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        elif len(strict_filtered) == 1:
            # –ï—Å–ª–∏ –ø–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞—à–µ–ª—Å—è 1 –º–∞—Ç—á - –¥–æ–±–∏—Ä–∞–µ–º 2 –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            filtered = strict_filtered + candidates[:2]
            self.logger.info("–ü–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–∞–π–¥–µ–Ω 1 –º–∞—Ç—á, –¥–æ–±–∏—Ä–∞–µ–º 2 –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")
        else:
            # –ï—Å–ª–∏ –ø–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ –Ω–∞—à–ª–æ—Å—å –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞ - –±–µ—Ä–µ–º —Ç–æ–ø-3 –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
            filtered = candidates[:MAX_FAVORITES]
            self.logger.info(f"–ü–æ —Å—Ç—Ä–æ–≥–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –º–∞—Ç—á–µ–π, –±–µ—Ä–µ–º —Ç–æ–ø-{MAX_FAVORITES} –∏–∑ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤")

        # –õ–∏–º–∏—Ç–∏—Ä—É–µ–º –¥–æ MAX_FAVORITES
        filtered = filtered[:MAX_FAVORITES]
        self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(filtered)} —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤ –∏–∑ {len(strict_filtered)} —Å—Ç—Ä–æ–≥–∏—Ö –∏ {len(candidates)} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ø-{len(filtered)}")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∞–≤–æ—Ä–∏—Ç–∞—Ö
        sent_favs = 0  # —Å—á–µ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤
        if filtered:
            for fav in filtered:
                try:
                    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –º–∞—Ç—á–∞
                    match_data = None
                    for m in live_matches:
                        if ((m.get('home_player') == fav['player'] and m.get('away_player') == fav['opponent']) or
                            (m.get('home_player') == fav['opponent'] and m.get('away_player') == fav['player'])):
                            match_data = m
                            break

                    if match_data:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                        msg = self.format_favorite_message(match_data, fav)
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        msg = (
                            f"<b>–ú–∞—Ç—á:</b> {fav['player']} vs {fav['opponent']}\n"
                            f"<b>–§–∞–≤–æ—Ä–∏—Ç:</b> {fav['player']}\n"
                            f"<b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> {fav['odds']}\n"
                            f"<b>% –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏:</b> {fav['first_serve']}%\n"
                            f"<b>% –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ:</b> {fav['first_serve_points']}%\n"
                            f"<b>–ì–µ–π–º—ã —Ñ–∞–≤–æ—Ä–∏—Ç–∞:</b>\n"
                            f"–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö\n"
                            f"–í—Å–µ–≥–æ –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –≥–µ–π–º–æ–≤: 0/0 (0%) | —Å–æ–ø–µ—Ä–Ω–∏–∫: 0/0 (0%)\n"
                            f"<a href='{fav['url']}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á</a>"
                        )

                    await telegram_bot.send_message(
                        chat_id=chat_id,
                        text=msg,
                        parse_mode='HTML',
                        disable_web_page_preview=True
                    )
                    sent_favs += 1  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫
                    self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ñ–∞–≤–æ—Ä–∏—Ç {sent_favs}/{len(filtered)}: {fav['player']}")
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ —Ñ–∞–≤–æ—Ä–∏—Ç–µ {fav['player']}: {str(e)}")
                    
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –ª–∏ –≤—Å–µ —Ñ–∞–≤–æ—Ä–∏—Ç—ã
            if sent_favs < len(filtered):
                self.logger.warning(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ç–æ–ª—å–∫–æ {sent_favs} –∏–∑ {len(filtered)} —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤")
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç –¥–ª—è GPT –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–æ–±—Ä–∞–Ω–Ω—ã—Ö —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤
            if len(filtered) > 0:
                best_match = max(filtered, key=lambda x: x.get('odds', 0))
                suggestion = (
                    f"<b>–°–û–í–ï–¢ –û–¢ BRO:</b> –õ—É—á—à–∞—è —Å—Ç–∞–≤–∫–∞ - {best_match['player']}.\n"
                    f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç: {best_match['odds']}, "
                    f"% –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏: {best_match['first_serve']}%, "
                    f"% –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ: {best_match['first_serve_points']}%"
                )
                try:
                    await telegram_bot.send_message(
                        chat_id=chat_id,
                        text=suggestion,
                        parse_mode='HTML'
                    )
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–≤–µ—Ç–∞: {str(e)}")
        else:
            await telegram_bot.send_message(
                chat_id=chat_id,
                text="‚ùå <b>–ü–æ–¥—Ö–æ–¥—è—â–∏—Ö —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ</b>\n\n–ù–∏ –æ–¥–∏–Ω –∏–∑ –º–∞—Ç—á–µ–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –∫—Ä–∏—Ç–µ—Ä–∏—è–º –¥–ª—è —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤.",
                parse_mode='HTML'
            )

        return filtered

    def safe_float(self, value):
        """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ float"""
        if not value:
            return 0.0
        try:
            # –£–¥–∞–ª—è–µ–º –≤—Å–µ, –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ —Ç–æ—á–∫–∏
            if isinstance(value, str):
                value = ''.join(c for c in value if c.isdigit() or c == '.')
            return float(value)
        except (ValueError, TypeError):
            return 0.0

    def extract_stat_value(self, stats, key_part, side, key_part2=None):
        """–ò–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            # –ò—â–µ–º –ø–æ –∫–ª—é—á—É, —Å–æ–¥–µ—Ä–∂–∞—â–µ–º—É key_part
            for key, val in stats.items():
                key_lower = key.lower()
                if key_part in key_lower and (key_part2 is None or key_part2 in key_lower):
                    if isinstance(val, dict):
                        side_val = val.get(side)
                        if isinstance(side_val, dict):
                            value = side_val.get('value') or side_val.get('percent')
                            if not value and side_val:
                                # –ï—Å–ª–∏ –Ω–µ—Ç —è–≤–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è, –±–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
                                for k, v in side_val.items():
                                    if isinstance(v, (int, float, str)) and v:
                                        value = v
                                        break
                        else:
                            value = side_val

                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —á–∏—Å–ª–æ
                    if value:
                        if isinstance(value, str):
                            value = value.replace('%', '').replace(',', '.')
                        return self.safe_float(value)

            return 0.0
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ {key_part} –¥–ª—è {side}: {str(e)}")
            return 0.0

    def parse_match_details(self, match_url):
        """–†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥ –¥–µ—Ç–∞–ª–µ–π –º–∞—Ç—á–∞ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∞–Ω–∞–ª–∏–∑–æ–º –¥–∞–Ω–Ω—ã—Ö –∏ —Å–∫–æ—Ä–æ—Å—Ç—å—é —Ä–∞–±–æ—Ç—ã"""
        try:
            start_time = time.time()
            self.logger.info(f"–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –º–∞—Ç—á–∞ {match_url}")

            match_data = {
                "url": match_url,
            }

            # –û—Ç–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞
            try:
                if self.live_url not in match_url and self.base_url not in match_url:
                    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—ã–π URL –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    match_url = f"{self.base_url}{match_url}"

                self.driver.get(match_url)
                self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞: {match_url}")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –º–∞—Ç—á–∞ {match_url}: {str(e)}")
                # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–ø—ã—Ç–∞—Ç—å—Å—è —Å–æ–±—Ä–∞—Ç—å —Ö–æ—Ç—å –∫–∞–∫–∏–µ-—Ç–æ –¥–∞–Ω–Ω—ã–µ

            # –ó–∞–∫—Ä—ã—Ç–∏–µ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ø–∞–ø–æ–≤ –∏ –±–∞–Ω–Ω–µ—Ä–æ–≤
            self.close_cookies_popup()

            # –ü–∞—Ä—Å–∏–Ω–≥ –∏–≥—Ä–æ–∫–æ–≤
            try:
                WebDriverWait(self.driver, 5).until(
                    EC.presence_of_element_located(
                        (By.CSS_SELECTOR, ".duelParticipant__home, .participant-home, [class*='home']"))
                )

                # –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤ —Å—Ç—Ä–∞–Ω–∏—Ü
                home_selectors = [
                    "div.duelParticipant__home",
                    ".participant__participantName--home",
                    ".participant-home",
                    "div[class*='home']",
                    "[data-testid='wcl-participant-home']",
                    "span[class*='homeTea']"
                ]
                away_selectors = [
                    "div.duelParticipant__away",
                    ".participant__participantName--away",
                    ".participant-away",
                    "div[class*='away']",
                    "[data-testid='wcl-participant-away']",
                    "span[class*='awayTea']"
                ]

                for selector in home_selectors:
                    try:
                        home_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                        match_data["home_player"] = home_element.text.strip()
                        if match_data["home_player"]:
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω –¥–æ–º–∞—à–Ω–∏–π –∏–≥—Ä–æ–∫: {match_data['home_player']}")
                            break
                    except:
                        continue

                for selector in away_selectors:
                    try:
                        away_element = self.driver.find_element(By.CSS_SELECTOR, selector)
                        match_data["away_player"] = away_element.text.strip()
                        if match_data["away_player"]:
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω –≥–æ—Å—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫: {match_data['away_player']}")
                            break
                    except:
                        continue

                if not match_data.get("home_player") or not match_data.get("away_player"):
                    self.logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–≥—Ä–æ–∫–æ–≤ –ø–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–º —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º, –ø—Ä–æ–±—É–µ–º JavaScript")

                    # –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–π JavaScript –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–≥—Ä–æ–∫–æ–≤ –Ω–∞ –ª—é–±—ã—Ö —Ç–∏–ø–∞—Ö —Å—Ç—Ä–∞–Ω–∏—Ü
                    js_players = self.driver.execute_script("""
                        function findPlayers() {
                            var players = {};

                            // –ü—Ä–æ–±—É–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã
                            var homeSelectors = [
                                'div.duelParticipant__home', 
                                '.participant__participantName--home',
                                '.participant-home', 
                                'div[class*="home"]',
                                '[data-testid="wcl-participant-home"]',
                                'span[class*="homeTea"]',
                                '.teamNames__home', 
                                '.home-team-name'
                            ];

                            var awaySelectors = [
                                'div.duelParticipant__away', 
                                '.participant__participantName--away',
                                '.participant-away', 
                                'div[class*="away"]',
                                '[data-testid="wcl-participant-away"]',
                                'span[class*="awayTea"]',
                                '.teamNames__away', 
                                '.away-team-name'
                            ];

                            // –ò—â–µ–º –ø–æ —Å–µ–ª–µ–∫—Ç–æ—Ä–∞–º
                            for (var i = 0; i < homeSelectors.length; i++) {
                                var homeElement = document.querySelector(homeSelectors[i]);
                                if (homeElement && homeElement.textContent.trim()) {
                                    players.home = homeElement.textContent.trim();
                                    break;
                                }
                            }

                            for (var i = 0; i < awaySelectors.length; i++) {
                                var awayElement = document.querySelector(awaySelectors[i]);
                                if (awayElement && awayElement.textContent.trim()) {
                                    players.away = awayElement.textContent.trim();
                                    break;
                                }
                            }

                            // –ï—Å–ª–∏ –≤—Å–µ –µ—â–µ –Ω–µ –Ω–∞—à–ª–∏, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ª—é–±—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏–º–µ–Ω–∞
                            if (!players.home || !players.away) {
                                var possibleElements = document.querySelectorAll('.participant, .participant__name, .participantName, [class*="participant"], [class*="team"]');

                                if (possibleElements.length >= 2) {
                                    if (!players.home) players.home = possibleElements[0].textContent.trim();
                                    if (!players.away) players.away = possibleElements[1].textContent.trim();
                                }
                            }

                            return players;
                        }

                        return findPlayers();
                    """)

                    if js_players:
                        if js_players.get('home') and not match_data.get("home_player"):
                            match_data["home_player"] = js_players.get('home')
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω –¥–æ–º–∞—à–Ω–∏–π –∏–≥—Ä–æ–∫ —á–µ—Ä–µ–∑ JS: {match_data['home_player']}")

                        if js_players.get('away') and not match_data.get("away_player"):
                            match_data["away_player"] = js_players.get('away')
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω –≥–æ—Å—Ç–µ–≤–æ–π –∏–≥—Ä–æ–∫ —á–µ—Ä–µ–∑ JS: {match_data['away_player']}")

            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∏–≥—Ä–æ–∫–æ–≤: {str(e)}")
                # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ URL –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
                match_data["home_player"] = match_data.get("home_player", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                match_data["away_player"] = match_data.get("away_player", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")

            # –ü–∞—Ä—Å–∏–Ω–≥ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            try:
                odds_data = self.parse_odds()

                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è JSON
                if odds_data:
                    match_data["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"] = {
                        "–∏–≥—Ä–æ–∫_1": {
                            "–∑–Ω–∞—á–µ–Ω–∏–µ": odds_data.get("home_odds", "–Ω/–¥"),
                            "—Ç—Ä–µ–Ω–¥": odds_data.get("home_odds_direction", "–Ω/–¥")
                        },
                        "–∏–≥—Ä–æ–∫_2": {
                            "–∑–Ω–∞—á–µ–Ω–∏–µ": odds_data.get("away_odds", "–Ω/–¥"),
                            "—Ç—Ä–µ–Ω–¥": odds_data.get("away_odds_direction", "–Ω/–¥")
                        },
                        "–≤—Ä–µ–º—è_–ø–∞—Ä—Å–∏–Ω–≥–∞": odds_data.get("parse_time", 0)
                    }

                    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤, –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
                    if odds_data.get("home_odds_old"):
                        match_data["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"]["–∏–≥—Ä–æ–∫_1"]["–ø—Ä–µ–¥—ã–¥—É—â–µ–µ"] = odds_data.get("home_odds_old")

                    if odds_data.get("away_odds_old"):
                        match_data["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"]["–∏–≥—Ä–æ–∫_2"]["–ø—Ä–µ–¥—ã–¥—É—â–µ–µ"] = odds_data.get("away_odds_old")

                    self.logger.info(f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã —Å–æ–±—Ä–∞–Ω—ã: {match_data['–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã']}")
                else:
                    match_data["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"] = {
                        "–∏–≥—Ä–æ–∫_1": {"–∑–Ω–∞—á–µ–Ω–∏–µ": "–Ω/–¥", "—Ç—Ä–µ–Ω–¥": "–Ω/–¥"},
                        "–∏–≥—Ä–æ–∫_2": {"–∑–Ω–∞—á–µ–Ω–∏–µ": "–Ω/–¥", "—Ç—Ä–µ–Ω–¥": "–Ω/–¥"},
                        "–≤—Ä–µ–º—è_–ø–∞—Ä—Å–∏–Ω–≥–∞": 0
                    }
                    self.logger.warning("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}")
                match_data["–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã"] = {
                    "–∏–≥—Ä–æ–∫_1": {"–∑–Ω–∞—á–µ–Ω–∏–µ": "–Ω/–¥", "—Ç—Ä–µ–Ω–¥": "–Ω/–¥"},
                    "–∏–≥—Ä–æ–∫_2": {"–∑–Ω–∞—á–µ–Ω–∏–µ": "–Ω/–¥", "—Ç—Ä–µ–Ω–¥": "–Ω/–¥"},
                    "–≤—Ä–µ–º—è_–ø–∞—Ä—Å–∏–Ω–≥–∞": 0
                }

            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
            try:
                serve_stats = self.parse_serve_stats()
                match_data["serve_stats"] = serve_stats
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∞—á–∏: {str(e)}")
                match_data["serve_stats"] = {}

            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–π–º–∞
            try:
                game_stats = self.parse_game_stats()
                match_data["game_stats"] = game_stats
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–π–º–∞: {str(e)}")
                match_data["game_stats"] = {}

            # –ü–∞—Ä—Å–∏–Ω–≥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–π–º–æ–≤
            try:
                games_stats = self.parse_games_stats()
                match_data["games_stats"] = games_stats
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–π–º–æ–≤: {str(e)}")
                match_data["games_stats"] = {}

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
            try:
                match_data["statistics_message"] = self.format_stats_message(match_data)
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")
                match_data["statistics_message"] = "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"

            total_time = time.time() - start_time
            match_data["parse_time"] = total_time
            self.logger.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –º–∞—Ç—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω –∑–∞ {total_time:.2f} —Å–µ–∫—É–Ω–¥")

            return match_data

        except Exception as e:
            self.logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –ø–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–µ–π –º–∞—Ç—á–∞ {match_url}: {str(e)}")
            tb = traceback.format_exc()
            self.logger.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {tb}")
            return {
                "url": match_url,
                "home_player": "–û—à–∏–±–∫–∞",
                "away_player": "–û—à–∏–±–∫–∞",
                "–∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã": {
                    "–∏–≥—Ä–æ–∫_1": {"–∑–Ω–∞—á–µ–Ω–∏–µ": "–Ω/–¥", "—Ç—Ä–µ–Ω–¥": "–Ω/–¥"},
                    "–∏–≥—Ä–æ–∫_2": {"–∑–Ω–∞—á–µ–Ω–∏–µ": "–Ω/–¥", "—Ç—Ä–µ–Ω–¥": "–Ω/–¥"},
                    "–≤—Ä–µ–º—è_–ø–∞—Ä—Å–∏–Ω–≥–∞": 0
                },
                "serve_stats": {},
                "game_stats": {},
                "games_stats": {},
                "parse_time": 0,
                "error": str(e),
                "statistics_message": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"
            }

    def get_live_matches(self, use_cache=True, max_workers=4):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤—Å–µ—Ö live –º–∞—Ç—á–∞—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏

        Args:
            use_cache (bool): –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –º–∞—Ç—á–µ–π
            max_workers (int): –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –ø–æ—Ç–æ–∫–æ–≤

        Returns:
            list: –°–ø–∏—Å–æ–∫ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–∞—Ö
        """
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫—ç—à, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ –±—ã–ª–æ
            if not hasattr(self, '_matches_cache'):
                self._matches_cache = {}
                self._cache_expiry = {}

            # –û—á–∏—Å—Ç–∫–∞ —É—Å—Ç–∞—Ä–µ–≤—à–∏—Ö –∑–∞–ø–∏—Å–µ–π –∫—ç—à–∞ (—Å—Ç–∞—Ä—à–µ 5 –º–∏–Ω—É—Ç)
            current_time = time.time()
            expired_urls = [url for url, timestamp in self._cache_expiry.items()
                            if current_time - timestamp > 300]  # 5 –º–∏–Ω—É—Ç

            for url in expired_urls:
                if url in self._matches_cache:
                    del self._matches_cache[url]
                if url in self._cache_expiry:
                    del self._cache_expiry[url]

            # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ –º–∞—Ç—á–∏
            match_links_objects = self.get_match_links()
            if not match_links_objects:
                self.logger.warning("–ù–µ –Ω–∞–π–¥–µ–Ω–æ live-–º–∞—Ç—á–µ–π")
                return []

            # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Å—ã–ª–æ–∫ –Ω–∞ –º–∞—Ç—á–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            all_links = []
            for match in match_links_objects:
                for url in match.get('urls', []):
                    if url not in all_links:
                        all_links.append(url)

            total_matches = len(all_links)
            self.logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º {total_matches} Live –º–∞—Ç—á–µ–π")

            # –†–∞–∑–¥–µ–ª—è–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–µ, —á—Ç–æ –≤ –∫—ç—à–µ –∏ —Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
            cached_links = [url for url in all_links if url in self._matches_cache and use_cache]
            links_to_process = [url for url in all_links if url not in cached_links]

            if cached_links:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(cached_links)} –º–∞—Ç—á–µ–π –≤ –∫—ç—à–µ")

            # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞
            def process_match(match_url, idx):
                try:
                    self.logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –º–∞—Ç—á–∞ {idx}/{total_matches}: {match_url}")
                    match_info = self.parse_match_details(match_url)
                    if match_info:
                        # –ö—ç—à–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                        if use_cache:
                            self._matches_cache[match_url] = match_info
                            self._cache_expiry[match_url] = time.time()
                        self.logger.info(
                            f"–ú–∞—Ç—á {idx}/{total_matches} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞ {match_info.get('parse_time', 0):.2f} —Å–µ–∫")
                        return match_info
                    else:
                        self.logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ {idx}/{total_matches}")
                        return None
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –º–∞—Ç—á–∞ {idx}/{total_matches}: {str(e)}")
                    return None

            matches_info = []

            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∏–∑ –∫—ç—à–∞
            for url in cached_links:
                matches_info.append(self._matches_cache[url])

            if not links_to_process:
                self.logger.info("–í—Å–µ –º–∞—Ç—á–∏ –Ω–∞–π–¥–µ–Ω—ã –≤ –∫—ç—à–µ")
                return matches_info

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∞—Ç—á–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            with ThreadPoolExecutor(max_workers=min(max_workers, len(links_to_process))) as executor:
                # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                futures = {executor.submit(process_match, url, i + 1): url
                           for i, url in enumerate(links_to_process)}

                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –º–µ—Ä–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
                from concurrent.futures import as_completed
                for future in as_completed(futures):
                    result = future.result()
                    if result:
                        matches_info.append(result)

            self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {len(matches_info)} –º–∞—Ç—á–∞—Ö –∏–∑ {total_matches}")
            return matches_info
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–∞—Ö: {str(e)}")
            return []

    def save_to_json(self, events, filename='tennis_events.json'):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –≤ JSON —Ñ–∞–π–ª"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–µ–π–º–æ–≤ –≤ –∫–∞–∂–¥–æ–º –º–∞—Ç—á–µ
            for event in events:
                if 'game_stats' not in event:
                    self.logger.warning(
                        f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–π–º–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ {event.get('home_player', 'Unknown')} vs {event.get('away_player', 'Unknown')}")
                else:
                    self.logger.info(
                        f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–π–º–æ–≤ –¥–ª—è –º–∞—Ç—á–∞ {event.get('home_player', 'Unknown')} vs {event.get('away_player', 'Unknown')}: {event['game_stats']}")

            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(events, f, ensure_ascii=False, indent=4)
            self.logger.info(f"–î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª {filename}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            with open(filename, 'r', encoding='utf-8') as f:
                saved_data = json.load(f)
                for event in saved_data:
                    if 'game_stats' in event:
                        self.logger.info(
                            f"–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {event['home_player']} vs {event['away_player']}")
                        self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≥–µ–π–º–æ–≤: {event['game_stats']}")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ —Ñ–∞–π–ª: {str(e)}")

    def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –¥—Ä–∞–π–≤–µ—Ä–∞"""
        try:
            self.driver.quit()
            self.logger.info("WebDriver —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç")
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ WebDriver: {str(e)}")

    def parse_specific_match(self, match_url):
        """–ü–∞—Ä—Å–∏–Ω–≥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–∞—Ç—á–∞ –ø–æ URL"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
            if not match_url.startswith("https://www.flashscorekz.com/match/tennis/"):
                self.logger.error(f"–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL –º–∞—Ç—á–∞: {match_url}")
                return None

            # –£–±–∏—Ä–∞–µ–º –ª—é–±—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ—Å–ª–µ URL –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
            clean_url = match_url.split("#")[0]

            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ parse_match_details, –∫–æ—Ç–æ—Ä—ã–π –≤–∫–ª—é—á–∞–µ—Ç –∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
            match_data = self.parse_match_details(clean_url)

            if match_data:
                self.logger.info(f"–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç—á–∞: {match_url}")
                return match_data
            else:
                self.logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è –º–∞—Ç—á–∞: {match_url}")
                return None

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –º–∞—Ç—á–∞: {str(e)}")
            return None

    def save_match_details(self, match_stats, match_url, filename=None):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–∞—Ç—á–µ –≤ JSON —Ñ–∞–π–ª"""
        try:
            if filename is None:
                # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                filename = f"match_stats_{timestamp}.json"

            # –î–æ–±–∞–≤–ª—è–µ–º URL –º–∞—Ç—á–∞ –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            match_stats['match_url'] = match_url
            match_stats['timestamp'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ JSON —Ñ–∞–π–ª
            with open(filename, 'w', encoding='utf-8') as f:
                json.dump(match_stats, f, ensure_ascii=False, indent=4)

            self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∞—Ç—á–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {filename}")
            return filename

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ñ–∞–π–ª: {str(e)}")
            return None

    def get_last_surface_match_stats(self, live_matches, output_json=None):
        """–î–ª—è –∫–∞–∂–¥–æ–≥–æ live-–º–∞—Ç—á–∞ –∏—â–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–∞—Ç—á —Å –Ω—É–∂–Ω—ã–º –ø–æ–∫—Ä—ã—Ç–∏–µ–º –≤ H2H, –∫–ª–∏–∫–∞–µ—Ç –ø–æ –ø–æ–∫—Ä—ã—Ç–∏—é, –ø–∞—Ä—Å–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å—ë –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON."""
        results = []
        for match in live_matches:
            try:
                match_url = match.get('url')
                if not match_url:
                    continue
                # –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ H2H
                if "#/h2h" not in match_url:
                    h2h_url = match_url.split("#")[0] + "#/h2h/overall"
                else:
                    h2h_url = match_url
                # –ù–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥—Ä–∞–π–≤–µ—Ä –¥–ª—è H2H
                chrome_options = ChromeOptions()
                chrome_options.add_argument('--headless')
                chrome_options.add_argument('--no-sandbox')
                chrome_options.add_argument('--disable-dev-shm-usage')
                service = ChromeService(executable_path='/usr/local/bin/chromedriver')
                driver = webdriver.Chrome(service=service, options=chrome_options)
                try:
                    driver.get(h2h_url)
                    self.close_cookies_popup(driver)
                    WebDriverWait(driver, 4).until(
                        EC.presence_of_element_located((By.CSS_SELECTOR, ".h2h__section"))
                    )
                    time.sleep(1.5)
                    found = False
                    rows = driver.find_elements(By.CSS_SELECTOR, ".h2h__row")
                    for row in rows:
                        try:
                            event_span = row.find_element(By.CSS_SELECTOR, ".h2h__event")
                            classes = event_span.get_attribute("class")
                            if any(surf in classes for surf in ["hard surface", "clay surface", "grass surface"]):
                                # –ö–ª–∏–∫–∞–µ–º –ø–æ —ç–ª–µ–º–µ–Ω—Ç—É –ø–æ–∫—Ä—ã—Ç–∏—è
                                driver.execute_script("arguments[0].scrollIntoView(true);", event_span)
                                event_span.click()
                                # –ñ–¥—ë–º –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                                WebDriverWait(driver, 4).until(
                                    EC.presence_of_element_located(
                                        (By.CSS_SELECTOR, "div[data-analytics-context='tab-match-statistics']"))
                                )
                                self.close_cookies_popup(driver)
                                stats = self.parse_match_details(driver.current_url)
                                results.append({
                                    "live_match_url": match_url,
                                    "surface_match_url": driver.current_url,
                                    "surface_type": classes,
                                    "surface_match_stats": stats
                                })
                                found = True
                                break
                        except Exception as e:
                            continue
                    if not found:
                        results.append({
                            "live_match_url": match_url,
                            "surface_match_url": None,
                            "surface_type": None,
                            "surface_match_stats": None
                        })
                except Exception as e:
                    self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ surface-–º–∞—Ç—á–∞ –¥–ª—è {match_url}: {str(e)}")
                finally:
                    try:
                        driver.quit()
                    except:
                        pass
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –≤ get_last_surface_match_stats: {str(e)}")
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π JSON
        if not output_json:
            output_json = f"last_surface_matches_stats_{datetime.now().strftime('%Y%m%d_%H%M%S')}.json"
        with open(output_json, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=4)
        self.logger.info(f"–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ surface-–º–∞—Ç—á–µ–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_json}")
        return output_json

    def format_games_stats(self, games_stats, favorite_side):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–µ–π–º–æ–≤ –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        if not games_stats:
            return '–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö'
        lines = []
        for k, v in games_stats.items():
            if isinstance(v, dict):
                fav = v.get(favorite_side, {})
                opp = v.get('away' if favorite_side == 'home' else 'home', {}) if favorite_side == 'home' else v.get(
                    'home', {})
                fav_percent = fav.get('percent', fav if isinstance(fav, str) else '')
                fav_numbers = fav.get('numbers', '')
                opp_percent = opp.get('percent', opp if isinstance(opp, str) else '')
                opp_numbers = opp.get('numbers', '')
                line = f"{k}: {fav_numbers} ({fav_percent}) | —Å–æ–ø–µ—Ä–Ω–∏–∫: {opp_numbers} ({opp_percent})"
                lines.append(line)
            else:
                lines.append(f"{k}: {v}")
        return '\n'.join(lines)

    def format_match_info(self, match):
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        odds = match.get('odds', {})
        serve_stats = match.get('serve_stats', {})
        game_stats = match.get('game_stats', {})
        url = match.get('url', '')
        home = match.get('home_player', '?')
        away = match.get('away_player', '?')

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        parse_time = odds.get('parse_time', 0)
        parse_time_str = f"{parse_time:.2f}" if parse_time else "–Ω/–¥"

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã
        home_odds = odds.get('home_odds', '?')
        away_odds = odds.get('away_odds', '?')

        # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–µ
        match_info = [
            f"\n<b>{safe_html(home)} ‚Äî {safe_html(away)}</b>",
            f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã: {home_odds} ‚Äî {away_odds} (–≤—Ä–µ–º—è –ø–∞—Ä—Å–∏–Ω–≥–∞: {parse_time_str}—Å)"
        ]

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ–¥–∞—á–∏, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if serve_stats:
            match_info.append("\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—á–∏:</b>")
            for key, values in serve_stats.items():
                if isinstance(values, dict):
                    home_val = values.get('home', '?')
                    away_val = values.get('away', '?')
                    if isinstance(home_val, dict):
                        home_val = home_val.get('value', '?')
                    if isinstance(away_val, dict):
                        away_val = away_val.get('value', '?')
                    match_info.append(f"{key}: {home_val} | {away_val}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–≥—Ä—ã, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
        if game_stats:
            match_info.append("\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä—ã:</b>")
            for key, values in game_stats.items():
                if isinstance(values, dict):
                    home_val = values.get('home', '?')
                    away_val = values.get('away', '?')
                    if isinstance(home_val, dict):
                        home_val = home_val.get('value', '?')
                    if isinstance(away_val, dict):
                        away_val = away_val.get('value', '?')
                    match_info.append(f"{key}: {home_val} | {away_val}")

        # –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –º–∞—Ç—á
        match_info.append(f"\n<a href='{html.escape(url)}'>–°—Å—ã–ª–∫–∞ –Ω–∞ –º–∞—Ç—á</a>")

        return '\n'.join(match_info)

    async def send_summary_to_telegram(self, live_matches, telegram_bot, chat_id):
        def safe_html(text):
            # –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª—ã, –∫—Ä–æ–º–µ —Ä–∞–∑—Ä–µ—à—ë–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤ <b>, <a>, </b>, </a>
            import re
            text = html.escape(text)
            text = re.sub(r'&lt;(\/?)b&gt;', r'<\1b>', text)
            text = re.sub(r'&lt;(\/?)a( [^&]*)&gt;', r'<\1a\2>', text)
            return text

        def split_message(text, max_length=3800):
            if len(text) <= max_length:
                return [text]

            parts = []
            current_part = ""
            lines = text.split('\n')
            header = '<b>–°–≤–æ–¥–∫–∞ –ø–æ live-–º–∞—Ç—á–∞–º:</b>'

            for line in lines:
                if not current_part:
                    current_part = header + '\n'

                if len(current_part + line + '\n') > max_length:
                    parts.append(current_part.rstrip())
                    current_part = header + "\n(–ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ)\n" + line + '\n'
                else:
                    current_part += line + '\n'

            if current_part:
                parts.append(current_part.rstrip())

            return parts

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
        summary = '<b>–°–≤–æ–¥–∫–∞ –ø–æ live-–º–∞—Ç—á–∞–º:</b>\n'

        if not live_matches:
            summary += "\n–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π"
        else:
            for match in live_matches:
                summary += self.format_match_info(match) + "\n" + "-" * 30 + "\n"

        # –†–∞–∑–±–∏–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —á–∞—Å—Ç–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        message_parts = split_message(summary)
        for i, part in enumerate(message_parts):
            try:
                await telegram_bot.send_message(
                    chat_id=chat_id,
                    text=part,
                    parse_mode='HTML',
                    disable_web_page_preview=True
                )
            except Exception as e:
                self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —á–∞—Å—Ç–∏ {i + 1} —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
                try:
                    error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–≤–æ–¥–∫–∏ (—á–∞—Å—Ç—å {i + 1}). –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
                    await telegram_bot.send_message(
                        chat_id=chat_id,
                        text=error_msg,
                        parse_mode='HTML'
                    )
                except:
                    pass

    def parse_odds_cell(self, html_content):
        """–°–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ oddsCell__odd

        –ê—Ä–≥—É–º–µ–Ω—Ç—ã:
            html_content (str): HTML-–∫–æ–¥ —Å–æ–¥–µ—Ä–∂–∞—â–∏–π —ç–ª–µ–º–µ–Ω—Ç—ã oddsCell__odd

        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
            dict: –°–ª–æ–≤–∞—Ä—å —Å –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞–º–∏ –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏ –∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏—è
        """
        try:
            self.logger.info("–ù–∞—á–∞–ª–æ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ oddsCell__odd")
            soup = BeautifulSoup(html_content, 'html.parser')
            odds_data = {}

            odds_cells = soup.select('.oddsCell__odd')
            if len(odds_cells) >= 2:
                self.logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(odds_cells)} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ oddsCell__odd")

                # –ü–æ–ª—É—á–∞–µ–º –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç—ã –∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
                # –ü–µ—Ä–≤—ã–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ–±—ã—á–Ω–æ –¥–æ–º–∞—à–Ω–∏–π)
                if odds_cells[0]:
                    # –ò—â–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
                    arrow_up = odds_cells[0].select('.arrow.arrowUp-ico')
                    arrow_down = odds_cells[0].select('.arrow.arrowDown-ico')

                    home_direction = None
                    if arrow_up:
                        home_direction = 'up'
                    elif arrow_down:
                        home_direction = 'down'

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∏–∑ span –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏
                    home_span = odds_cells[0].select('span')
                    if home_span:
                        home_text = re.sub(r'[^0-9.]', '', home_span[0].text)
                        if home_text and self._is_valid_odds(home_text):
                            odds_data["home_odds"] = home_text
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞: {home_text}")
                            if home_direction:
                                odds_data["home_odds_direction"] = home_direction

                # –í—Ç–æ—Ä–æ–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç (–æ–±—ã—á–Ω–æ –≥–æ—Å—Ç–µ–≤–æ–π)
                if len(odds_cells) > 1 and odds_cells[1]:
                    # –ò—â–µ–º —Å—Ç—Ä–µ–ª–∫–∏ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞
                    arrow_up = odds_cells[1].select('.arrow.arrowUp-ico')
                    arrow_down = odds_cells[1].select('.arrow.arrowDown-ico')

                    away_direction = None
                    if arrow_up:
                        away_direction = 'up'
                    elif arrow_down:
                        away_direction = 'down'

                    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–∞ –∏–∑ span –≤–Ω—É—Ç—Ä–∏ —è—á–µ–π–∫–∏
                    away_span = odds_cells[1].select('span')
                    if away_span:
                        away_text = re.sub(r'[^0-9.]', '', away_span[0].text)
                        if away_text and self._is_valid_odds(away_text):
                            odds_data["away_odds"] = away_text
                            self.logger.info(f"–ù–∞–π–¥–µ–Ω –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {away_text}")
                            if away_direction:
                                odds_data["away_odds_direction"] = away_direction

            # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º title –∞—Ç—Ä–∏–±—É—Ç—ã –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤
            for i, cell in enumerate(odds_cells):
                title = cell.get('title', '')
                if title and '¬ª' in title:
                    try:
                        parts = title.split('¬ª')
                        if len(parts) == 2:
                            old_odds = re.sub(r'[^0-9.]', '', parts[0].strip())
                            new_odds = re.sub(r'[^0-9.]', '', parts[1].strip())
                            if i == 0 and old_odds and new_odds and self._is_valid_odds(old_odds):
                                odds_data["home_odds_old"] = old_odds
                                self.logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∏–≥—Ä–æ–∫–∞: {old_odds}")
                            elif i == 1 and old_odds and new_odds and self._is_valid_odds(old_odds):
                                odds_data["away_odds_old"] = old_odds
                                self.logger.info(f"–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –Ω–∞ –≥–æ—Å—Ç–µ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞: {old_odds}")
                    except Exception as e:
                        self.logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤: {str(e)}")

            return odds_data

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç–æ–≤ –∏–∑ oddsCell__odd: {str(e)}")
            return {}

    async def filter_and_send_favorites_from_json(self, json_file, telegram_bot, chat_id):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞, —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –º–∞—Ç—á–∏ –ø–æ –∫—Ä–∏—Ç–µ—Ä–∏—è–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ Telegram"""
        try:
            self.logger.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞: {json_file}")

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
            with open(json_file, 'r', encoding='utf-8') as f:
                live_matches = json.load(f)

            self.logger.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(live_matches)} –º–∞—Ç—á–µ–π –∏–∑ JSON —Ñ–∞–π–ª–∞")

            # –í—ã–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏
            await self.filter_and_send_favorites(live_matches, telegram_bot, chat_id)

        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON —Ñ–∞–π–ª–∞: {str(e)}")
            traceback_str = traceback.format_exc()
            self.logger.error(f"–°—Ç–µ–∫ –≤—ã–∑–æ–≤–æ–≤: {traceback_str}")
            await telegram_bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON —Ñ–∞–π–ª–∞</b>\n\n{str(e)}",
                parse_mode='HTML'
            )


# === –§–£–ù–ö–¶–ò–Ø –°–û–ó–î–ê–ù–ò–Ø –ò–ù–í–û–ô–°–ê –î–õ–Ø –û–ü–õ–ê–¢–´ –ö–†–ò–ü–¢–û–ô ===
async def send_crypto_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    user_id = get_user_id(update)
    username = update.effective_user.username or ''
    amount = 299  # –°—É–º–º–∞ –≤ —Ä—É–±–ª—è—Ö
    description = '–ü–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö 3 –º–∞—Ç—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏'
    payload = f'crypto-premium-{user_id}-{int(time.time())}'

    # –°–æ–∑–¥–∞—ë–º –∏–Ω–≤–æ–π—Å —á–µ—Ä–µ–∑ Crypto Pay API (—Ç–æ–ª—å–∫–æ TON, —ç–∫–≤–∏–≤–∞–ª–µ–Ω—Ç 299 RUB)
    headers = {
        'Crypto-Pay-API-Token': CRYPTO_PAY_API_TOKEN,
        'Content-Type': 'application/json'
    }
    data = {
        'currency_type': 'fiat',  # –í–∞–ª—é—Ç–∞ ‚Äî —Ñ–∏–∞—Ç
        'fiat': 'RUB',  # –†—É–±–ª–∏
        'amount': str(amount),  # 299 —Ä—É–±–ª–µ–π
        'accepted_assets': 'TON',  # –¢–æ–ª—å–∫–æ TON
        'description': description,
        'payload': payload,
        'allow_comments': False,
        'allow_anonymous': True
    }
    try:
        resp = requests.post(CRYPTO_PAY_API_URL + 'createInvoice', headers=headers, json=data, timeout=10)
        resp.raise_for_status()
        result = resp.json()
        if result.get('ok') and result.get('result'):
            invoice = result['result']
            pay_url = invoice.get('bot_invoice_url') or invoice.get('pay_url')
            invoice_id = invoice.get('invoice_id')
            msg = f'üí∏ <b>–û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π (TON, —ç–∫–≤. 299‚ÇΩ)</b>\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n<a href="{pay_url}">–û–ø–ª–∞—Ç–∏—Ç—å</a>'
            await context.bot.send_message(chat_id=chat_id, text=msg, parse_mode='HTML', disable_web_page_preview=False)
            await poll_crypto_invoice_status(context, chat_id, invoice_id, user_id, username)
        else:
            await context.bot.send_message(chat_id=chat_id,
                                           text='–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã –∫—Ä–∏–ø—Ç–æ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.')
    except Exception as e:
        await context.bot.send_message(chat_id=chat_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∏–Ω–≤–æ–π—Å–∞: {e}')


# === –§–£–ù–ö–¶–ò–Ø POLLING –î–õ–Ø –ü–†–û–í–ï–†–ö–ò –û–ü–õ–ê–¢–´ –ö–†–ò–ü–¢–û–ô ===
async def poll_crypto_invoice_status(context, chat_id, invoice_id, user_id, username, max_attempts=80, delay=15):
    import traceback
    headers = {
        'Crypto-Pay-API-Token': CRYPTO_PAY_API_TOKEN,
        'Content-Type': 'application/json'
    }
    for attempt in range(max_attempts):
        try:
            resp = requests.get(CRYPTO_PAY_API_URL + f'getInvoices?invoice_ids={invoice_id}', headers=headers,
                                timeout=10)
            resp.raise_for_status()
            result = resp.json()
            invoices = result.get('result', {}).get('items', [])
            if isinstance(invoices, list) and invoices:
                invoice = invoices[0]
                if invoice.get('status') == 'paid':
                    # –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
                    # add_user_points(user_id, username, 1000)  # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã/–ø—Ä–µ–º–∏—É–º (—É–±—Ä–∞–Ω–æ)
                    await context.bot.send_message(chat_id=chat_id,
                                                   text='‚úÖ –û–ø–ª–∞—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π.\n–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π...')
                    return
            else:
                await context.bot.send_message(chat_id=chat_id,
                                               text=f'–ò–Ω–≤–æ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —Å–æ–∑–¥–∞–Ω. –û—Ç–≤–µ—Ç API: {result}')
                await asyncio.sleep(delay)
                continue
            await asyncio.sleep(delay)
        except Exception as e:
            tb = traceback.format_exc()
            await context.bot.send_message(chat_id=chat_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã:\n{e!r}\n{tb}')
            return
    await context.bot.send_message(chat_id=chat_id,
                                   text='‚ùå –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏—Å—Ç–µ–∫–ª–æ. –ï—Å–ª–∏ –≤—ã –æ–ø–ª–∞—Ç–∏–ª–∏ ‚Äî –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.')


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –±–∞–ª–ª–æ–≤ –∏ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ ---
def load_users():
    with FileLock("users.json.lock"):
        if not os.path.exists(USERS_FILE):
            return {}
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)


def save_users(users):
    with FileLock("users.json.lock"):
        with open(USERS_FILE, 'w', encoding='utf-8') as f:
            json.dump(users, f, ensure_ascii=False, indent=2)


def load_promos():
    with FileLock("promo_codes.json.lock"):
        if not os.path.exists(PROMO_FILE):
            return []
        with open(PROMO_FILE, 'r', encoding='utf-8') as f:
            return json.load(f)


def save_promos(promos):
    with FileLock("promo_codes.json.lock"):
        with open(PROMO_FILE, 'w', encoding='utf-8') as f:
            json.dump(promos, f, ensure_ascii=False, indent=2)


def get_user_id(update):
    # –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç username –µ—Å–ª–∏ –µ—Å—Ç—å, –∏–Ω–∞—á–µ id
    if update.effective_user.username:
        return update.effective_user.username
    return str(update.effective_user.id)


def get_user_points(user_id):
    users = load_users()
    return users.get(user_id, {}).get('points', 0)


def add_user_points(user_id, username, points):
    users = load_users()
    if user_id not in users:
        users[user_id] = {'username': username, 'points': 0}
    users[user_id]['points'] += points
    save_users(users)


def set_user_points(user_id, username, points):
    users = load_users()
    if user_id not in users:
        users[user_id] = {'username': username, 'points': 0}
    users[user_id]['points'] = points
    save_users(users)


# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ ---
def generate_promo_codes(n):
    chars = 'ABCDEFGHJKLMNPQRSTUVWXYZ23456789'
    codes = []
    for _ in range(n):
        code = ''.join(random.choices(chars, k=8))
        codes.append(code)
    promos = load_promos()
    promos.extend(codes)
    save_promos(promos)
    return codes


# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu(points, is_admin=False):
    keyboard = [
        [InlineKeyboardButton('–ü–û–î–ë–û–† –ú–ê–¢–ß–ê', callback_data='pick_match')],
        [InlineKeyboardButton('–°–õ–£–ñ–ë–ê –ü–û–î–î–ï–†–ñ–ö–ò', callback_data='support')],
        [InlineKeyboardButton('–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –†–ê–ë–û–¢–ïüëàüèª', callback_data='instructions')],
        [InlineKeyboardButton(f'–ë–∞–ª–∞–Ω—Å: {points} –±–∞–ª–ª–æ–≤', callback_data='balance')]
    ]
    if is_admin:
        keyboard.append([InlineKeyboardButton('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥—ã', callback_data='admin_generate_promo')])
        keyboard.append([InlineKeyboardButton('–í—ã–≥—Ä—É–∑–∏—Ç—å –ø—Ä–æ–º–æ-–∫–æ–¥—ã', callback_data='admin_export_promos')])
    return InlineKeyboardMarkup(keyboard)


def pick_match_menu():
    """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ –º–∞—Ç—á–∞"""
    keyboard = [
        [InlineKeyboardButton('–û–ü–õ–ê–¢–ê –° –ö–ê–†–¢–´', callback_data='pay_rub')],
        [InlineKeyboardButton('–û–ü–õ–ê–¢–ê –ö–†–ò–ü–¢–û–ô', callback_data='pay_crypto')],
        [InlineKeyboardButton('–û–ü–õ–ê–¢–ê –°–ë–ü', callback_data='pay_sbp')],
        [InlineKeyboardButton('–í–í–ï–°–¢–ò –ü–†–û–ú–û-–ö–û–î', callback_data='enter_promo')],
        [InlineKeyboardButton('–û–ë–ú–ï–ù–Ø–¢–¨ –ë–ê–õ–õ–´ –ù–ê –ü–†–û–ú–û-–ö–û–î', callback_data='exchange_points')],
        [InlineKeyboardButton('¬´ –ù–ê–ó–ê–î', callback_data='main_menu')]
    ]
    return InlineKeyboardMarkup(keyboard)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id(update)
    username = update.effective_user.username or ''
    users = load_users()
    if user_id not in users:
        users[user_id] = {'username': username, 'points': 0}
        save_users(users)
    points = users[user_id]['points']
    is_admin = (user_id in ADMIN_ID)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º —Ç–µ–∫—Å—Ç–æ–º
    welcome_text = (
        "–í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —Å–ø–æ—Ä—Ç–µ.\n\n"
        "HoldStat —Å–æ–±–µ—Ä–µ—Ç –¥–ª—è –≤–∞—Å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, "
        "–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –≥–µ–π–º–∞—Ö –∏ –∑–∞—Ä–∞–±–æ—Ç–∫—É –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–∏—Ñ–∫—É –∏–ª–∏ –≤–∏–¥–µ–æ –µ—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ /start
    if update.message and (not context.user_data.get('welcomed') or update.message.text == '/start'):
        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –≥–∏—Ñ–∫—É. –ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å URL –≥–∏—Ñ–∫–∏ –∏–ª–∏ –ø—É—Ç—å –∫ –ª–æ–∫–∞–ª—å–Ω–æ–º—É —Ñ–∞–π–ª—É
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            gif_path = "welcome.gif"
            mp4_path = "welcome.mp4"

            if os.path.exists(mp4_path):
                # –ï—Å–ª–∏ –µ—Å—Ç—å MP4, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                with open(mp4_path, 'rb') as video:
                    await update.message.reply_video(
                        video=video,
                        caption=welcome_text,
                        reply_markup=main_menu(points, is_admin)
                    )
            elif os.path.exists(gif_path):
                # –ï—Å–ª–∏ –µ—Å—Ç—å GIF, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                with open(gif_path, 'rb') as gif:
                    await update.message.reply_animation(
                        animation=gif,
                        caption=welcome_text,
                        reply_markup=main_menu(points, is_admin)
                    )
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
                gif_url = "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMzloY3prMmkxaXJqenk1aWRqZjU3dGl6Y2tlNGY4eXN6aWRjZnA2NiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/cMnPcJfnJI9K9HGIHk/giphy.gif"
                await update.message.reply_animation(
                    animation=gif_url,
                    caption=welcome_text,
                    reply_markup=main_menu(points, is_admin)
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
            await update.message.reply_text(welcome_text, reply_markup=main_menu(points, is_admin))

        context.user_data['welcomed'] = True
    else:
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —ç—Ç–æ callback_query
        if update.callback_query:
            await update.callback_query.edit_message_text(welcome_text, reply_markup=main_menu(points, is_admin))
        else:
            await update.message.reply_text(welcome_text, reply_markup=main_menu(points, is_admin))


async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    data = query.data
    user_id = get_user_id(update)
    username = update.effective_user.username or ''
    users = load_users()
    if user_id not in users:
        users[user_id] = {'username': username, 'points': 0}
        save_users(users)
    points = users[user_id]['points']
    is_admin = (user_id in ADMIN_ID)

    if data == 'main_menu':
        welcome_text = (
            "–í–∞—à –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –∑–∞—Ä–∞–±–æ—Ç–∫—É –Ω–∞ —Å–ø–æ—Ä—Ç–µ.\n\n"
            "HoldStat —Å–æ–±–µ—Ä–µ—Ç –¥–ª—è –≤–∞—Å –≤—Å—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ —Ä–µ–∂–∏–º–µ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, "
            "–∏ –≤—ã–±–µ—Ä–µ—Ç –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –≥–µ–π–º–∞—Ö –∏ –∑–∞—Ä–∞–±–æ—Ç–∫—É –∑–∞ –ø–∞—Ä—É –º–∏–Ω—É—Ç"
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–∏—Ñ–∫–æ–π –∏–ª–∏ –≤–∏–¥–µ–æ, –∞ –Ω–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—Ç–∞—Ä–æ–µ
        try:
            # –ë–µ–∑–æ–ø–∞—Å–Ω–æ —É–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —É –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –±–µ–∑ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞
            try:
                await query.edit_message_reply_markup(reply_markup=None)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã: {e}")
                # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–±—É–µ–º –µ–≥–æ —É–¥–∞–ª–∏—Ç—å
                try:
                    await context.bot.delete_message(
                        chat_id=query.message.chat_id,
                        message_id=query.message.message_id
                    )
                except Exception as delete_error:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {delete_error}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ª–æ–∫–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            gif_path = "welcome.gif"
            mp4_path = "welcome.mp4"

            if os.path.exists(mp4_path):
                # –ï—Å–ª–∏ –µ—Å—Ç—å MP4, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                with open(mp4_path, 'rb') as video:
                    await context.bot.send_video(
                        chat_id=query.message.chat_id,
                        video=video,
                        caption=welcome_text,
                        reply_markup=main_menu(points, is_admin)
                    )
            elif os.path.exists(gif_path):
                # –ï—Å–ª–∏ –µ—Å—Ç—å GIF, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
                with open(gif_path, 'rb') as gif:
                    await context.bot.send_animation(
                        chat_id=query.message.chat_id,
                        animation=gif,
                        caption=welcome_text,
                        reply_markup=main_menu(points, is_admin)
                    )
            else:
                # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º URL
                gif_url = "https://media.giphy.com/media/v1.Y2lkPTc5MGI3NjExMzloY3prMmkxaXJqenk1aWRqZjU3dGl6Y2tlNGY4eXN6aWRjZnA2NiZlcD12MV9pbnRlcm5hbF9naWZfYnlfaWQmY3Q9Zw/cMnPcJfnJI9K9HGIHk/giphy.gif"
                await context.bot.send_animation(
                    chat_id=query.message.chat_id,
                    animation=gif_url,
                    caption=welcome_text,
                    reply_markup=main_menu(points, is_admin)
                )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é: {e}")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=welcome_text,
                reply_markup=main_menu(points, is_admin)
            )
    elif data == 'instructions':
        instructions_text = (
            "–ò–ù–°–¢–†–£–ö–¶–ò–Ø –ü–û –†–ê–ë–û–¢–ï\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏:"
        )
        keyboard = [
            [InlineKeyboardButton('–û–¢–ö–†–´–¢–¨ –ò–ù–°–¢–†–£–ö–¶–ò–Æ', url='https://t.me/holdstat/14858')],
            [InlineKeyboardButton('¬´ –ù–ê–ó–ê–î', callback_data='main_menu')]
        ]
        try:
            await query.edit_message_text(instructions_text, reply_markup=InlineKeyboardMarkup(keyboard))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=instructions_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    elif data == 'pick_match':
        match_text = (
            '–ü–û–î–ë–û–† –ú–ê–¢–ß–ê:\n\n'
            '–ü–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö 3 –º–∞—Ç—á–µ–π –∏–∑ –≤—Å–µ—Ö –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ –∏ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ:\n'
            '–í—Å–µ–≥–æ 299‚ÇΩ\n\n'
            '–í—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç—Ä–∞–±–æ—Ç–∞—Ç—å –æ—Ç 1 –¥–æ 5 —Å—Ç–∞–≤–æ–∫ –ø–æ –º–∞—Ç—á–∞–º –∑–∞ –æ–¥–∏–Ω –ø–æ–¥–±–æ—Ä –∏ –∑–∞ —Å–∞–º–æ–µ –±—ã—Å—Ç—Ä–æ–µ –≤—Ä–µ–º—è.'
        )
        try:
            await query.edit_message_text(match_text, reply_markup=pick_match_menu())
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–±–æ—Ä–∞ –º–∞—Ç—á–∞: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=match_text,
                reply_markup=pick_match_menu()
            )
    elif data == 'support':
        support_text = '–°–≤—è–∑—å: @HoldStatSupportBot'
        try:
            await query.edit_message_text(support_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=support_text)
    elif data == 'balance':
        balance_text = f'–£ —Ç–µ–±—è {points} –±–∞–ª–ª–æ–≤.'
        try:
            await query.edit_message_text(balance_text, reply_markup=main_menu(points, is_admin))
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=balance_text,
                reply_markup=main_menu(points, is_admin)
            )
    elif data == 'pay_rub':
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å—á–µ—Ç–∞
        try:
            await send_invoice(update, context)
            await query.edit_message_text('–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—á–µ—Ç–∞: {e}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text='–°—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!')
            await send_invoice(update, context)
    elif data == 'pay_crypto':
        await send_crypto_invoice(update, context)
    elif data == 'enter_promo':
        promo_text = '–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ-–∫–æ–¥ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:'
        try:
            await query.edit_message_text(promo_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=promo_text)
        context.user_data['awaiting_promo'] = True
    elif data == 'exchange_points':
        if points >= 15:
            promos = load_promos()
            if promos:
                code = promos.pop(0)
                save_promos(promos)
                # set_user_points(user_id, username, points - 15)  # –£–±—Ä–∞–Ω–æ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –±–∞–ª–ª–æ–≤
                promo_text = f'–¢–≤–æ–π –ø—Ä–æ–º–æ-–∫–æ–¥: <b>{code}</b>\n(–æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–π, –≤–≤–µ–¥–∏ –µ–≥–æ –≤ –º–µ–Ω—é ¬´–ü–û–î–ë–û–† –ú–ê–¢–ß–ê¬ª ‚Äî ¬´–í–í–ï–°–¢–ò –ü–†–û–ú–û-–ö–û–î¬ª)'
                try:
                    await query.edit_message_text(promo_text, parse_mode='HTML')
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø—Ä–æ–º–æ–∫–æ–¥–æ–º: {e}")
                    try:
                        await context.bot.delete_message(chat_id=query.message.chat_id,
                                                         message_id=query.message.message_id)
                    except:
                        pass
                    await context.bot.send_message(
                        chat_id=query.message.chat_id,
                        text=promo_text,
                        parse_mode='HTML'
                    )
            else:
                no_promo_text = '–ü—Ä–æ–º–æ-–∫–æ–¥—ã –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –Ω–∞–ø–∏—à–∏ @HoldStatSupportBot!'
                try:
                    await query.edit_message_text(no_promo_text)
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤: {e}")
                    try:
                        await context.bot.delete_message(chat_id=query.message.chat_id,
                                                         message_id=query.message.message_id)
                    except:
                        pass
                    await context.bot.send_message(chat_id=query.message.chat_id, text=no_promo_text)
        else:
            not_enough_points_text = f'–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–∞–ª–ª–æ–≤! –ù—É–∂–Ω–æ 15, —É —Ç–µ–±—è {points}.'
            try:
                await query.edit_message_text(not_enough_points_text, reply_markup=pick_match_menu())
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–µ –±–∞–ª–ª–æ–≤: {e}")
                try:
                    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                except:
                    pass
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=not_enough_points_text,
                    reply_markup=pick_match_menu()
                )
    elif data == 'admin_generate_promo' and is_admin:
        admin_text = '–í–≤–µ–¥–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤ –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º:'
        try:
            await query.edit_message_text(admin_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–¥–º–∏–Ω–∞: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=admin_text)
        context.user_data['awaiting_admin_promo'] = True
    elif data == 'load_from_json':
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ JSON —Ñ–∞–π–ª–æ–≤
        json_files = []
        for file in os.listdir():
            if file.startswith('live_matches_') and file.endswith('.json'):
                json_files.append(file)

        if not json_files:
            no_files_text = '–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö JSON —Ñ–∞–π–ª–æ–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ –º–∞—Ç—á–∞—Ö.'
            try:
                await query.edit_message_text(no_files_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
                try:
                    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                except:
                    pass
                await context.bot.send_message(chat_id=query.message.chat_id, text=no_files_text)
            return

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –ø–æ –¥–∞—Ç–µ (—Å–∞–º—ã–µ –Ω–æ–≤—ã–µ —Å–≤–µ—Ä—Ö—É)
        json_files.sort(reverse=True)

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∞–π–ª–∞–º–∏
        keyboard = []
        for file in json_files[:10]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º 10 —Ñ–∞–π–ª–∞–º–∏
            keyboard.append([InlineKeyboardButton(file, callback_data=f"json_file:{file}")])

        keyboard.append([InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="pick_match")])

        files_text = '–í—ã–±–µ—Ä–∏—Ç–µ JSON —Ñ–∞–π–ª –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:'
        try:
            await query.edit_message_text(
                files_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ —Å–ø–∏—Å–∫–æ–º —Ñ–∞–π–ª–æ–≤: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=files_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
    elif data.startswith('json_file:'):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ data
        json_file = data.split(':', 1)[1]

        if not os.path.exists(json_file):
            file_not_found_text = f'–§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            try:
                await query.edit_message_text(file_not_found_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ: {e}")
                try:
                    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                except:
                    pass
                await context.bot.send_message(chat_id=query.message.chat_id, text=file_not_found_text)
            return

        analysis_start_text = f"–ù–∞—á–∏–Ω–∞—é –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–∞ {json_file}..."
        try:
            await query.edit_message_text(analysis_start_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–∞—á–∞–ª–µ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=analysis_start_text)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É
        parser = TennisParser()
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
            await parser.filter_and_send_favorites_from_json(json_file, context.bot, query.message.chat_id)

            # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–æ–¥–∫–∏
            keyboard = [
                [InlineKeyboardButton("–ó–∞–ø—Ä–æ—Å–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É", callback_data=f"summary_from_json:{json_file}")],
                [InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="pick_match")]]

            analysis_complete_text = "–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ç—á–∞–º:"
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=analysis_complete_text,
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —Ñ–∞–π–ª–∞: {str(e)}"
            )
        finally:
            parser.close()
    elif data.startswith('summary_from_json:'):
        # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –∏–∑ data
        json_file = data.split(':', 1)[1]

        if not os.path.exists(json_file):
            file_not_found_text = f'–§–∞–π–ª {json_file} –Ω–µ –Ω–∞–π–¥–µ–Ω.'
            try:
                await query.edit_message_text(file_not_found_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –Ω–µ–Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ñ–∞–π–ª–µ: {e}")
                try:
                    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                except:
                    pass
                await context.bot.send_message(chat_id=query.message.chat_id, text=file_not_found_text)
            return

        summary_loading_text = f"–ó–∞–≥—Ä—É–∂–∞—é –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞ {json_file} –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —Å–≤–æ–¥–∫–∏..."
        try:
            await query.edit_message_text(summary_loading_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ –∑–∞–≥—Ä—É–∑–∫–µ —Å–≤–æ–¥–∫–∏: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=summary_loading_text)

        # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
        parser = TennisParser()
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞
            with open(json_file, 'r', encoding='utf-8') as f:
                live_matches = json.load(f)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            await parser.send_summary_to_telegram(live_matches, context.bot, query.message.chat_id)

            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
            keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="pick_match")]]
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text="–°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        except Exception as e:
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}"
            )
        finally:
            parser.close()
    elif data == 'request_summary':
        summary_text = '–§–æ—Ä–º–∏—Ä—É—é –ø–æ–ª–Ω—É—é —Å–≤–æ–¥–∫—É –ø–æ –º–∞—Ç—á–∞–º...'
        try:
            await query.edit_message_text(summary_text)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞ —Å–≤–æ–¥–∫–∏: {e}")
            try:
                await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
            except:
                pass
            await context.bot.send_message(chat_id=query.message.chat_id, text=summary_text)

        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        live_matches = context.bot_data.get('live_matches', [])
        if live_matches:
            # –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–∞—Ä—Å–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–≤–æ–¥–∫—É
            parser = TennisParser()
            try:
                await parser.send_summary_to_telegram(live_matches, context.bot, query.message.chat_id)

                # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é
                keyboard = [[InlineKeyboardButton("¬´ –ù–∞–∑–∞–¥", callback_data="main_menu")]]
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text="–°–≤–æ–¥–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
                    reply_markup=InlineKeyboardMarkup(keyboard)
                )
            except Exception as e:
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {str(e)}"
                )
            finally:
                parser.close()
        else:
            no_matches_text = "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥."
            try:
                await query.edit_message_text(no_matches_text)
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –º–∞—Ç—á–µ–π: {e}")
                try:
                    await context.bot.delete_message(chat_id=query.message.chat_id, message_id=query.message.message_id)
                except:
                    pass
                await context.bot.send_message(chat_id=query.message.chat_id, text=no_matches_text)
    elif data == 'show_matches':
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ –∏–∑ –¥–∞–Ω–Ω—ã—Ö –±–æ—Ç–∞
        live_matches = context.bot_data.get('live_matches', [])
        if live_matches:
            await query.edit_message_text('–§–æ—Ä–º–∏—Ä—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—Ç—á–∞—Ö...')
            parser = TennisParser()
            await parser.send_summary_to_telegram(live_matches, context.bot, chat_id=query.message.chat_id)
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text='–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
                reply_markup=pick_match_menu()
            )
        else:
            await query.edit_message_text(
                '–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π.',
                reply_markup=pick_match_menu()
            )
    elif data == 'pay_sbp':
        await send_sbp_invoice(update, context)
    elif data == 'admin_export_promos' and is_admin:
        promo_file = PROMO_FILE
        if os.path.exists(promo_file):
            try:
                await context.bot.send_document(
                    chat_id=query.message.chat_id,
                    document=open(promo_file, 'rb'),
                    filename=promo_file,
                    caption='–§–∞–π–ª —Å –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏'
                )
            except Exception as e:
                await context.bot.send_message(chat_id=query.message.chat_id, text=f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}')
        else:
            await context.bot.send_message(chat_id=query.message.chat_id, text='–§–∞–π–ª —Å –ø—Ä–æ–º–æ-–∫–æ–¥–∞–º–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω.')
    else:
        await query.edit_message_text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.')


async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if update.effective_chat.type != "private":
        return
    user_id = get_user_id(update)
    username = update.effective_user.username or ''
    users = load_users()
    if user_id not in users:
        users[user_id] = {'username': username, 'points': 0}
        save_users(users)
    points = users[user_id]['points']
    is_admin = (user_id in ADMIN_ID)
    if context.user_data.get('awaiting_promo'):
        code = update.message.text.strip().upper()
        promos = load_promos()
        if code in promos:
            promos.remove(code)
            save_promos(promos)
            await update.message.reply_text('–ü—Ä–æ–º–æ-–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –ó–∞–ø—É—Å–∫–∞—é –ø–æ–¥–±–æ—Ä...')
            context.user_data['awaiting_promo'] = False
            # –ó–∞–ø—É—Å–∫ –ø–∞—Ä—Å–µ—Ä–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            def start_parsing():
                try:
                    print(f"–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id}")
                    logging.info(f"–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id}")
                    parsing_worker(update.effective_chat.id, context, None)  # –ü–µ—Ä–µ–¥–∞–µ–º None –≤–º–µ—Å—Ç–æ loop
                    print(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                    logging.info(f"–ü–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {update.effective_chat.id} –∑–∞–≤–µ—Ä—à–µ–Ω")
                except Exception as e:
                    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}")
                    traceback.print_exc()
                    try:
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –Ω–∞–ø—Ä—è–º—É—é —á–µ—Ä–µ–∑ HTTP –∑–∞–ø—Ä–æ—Å
                        url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
                        data = {
                            "chat_id": update.effective_chat.id,
                            "text": f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {e}"
                        }
                        requests.post(url, data=data)
                    except Exception as send_error:
                        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_error}")
            threading.Thread(target=start_parsing).start()
            return
        else:
            await update.message.reply_text('–ü—Ä–æ–º–æ-–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.',
                                            reply_markup=main_menu(points, is_admin))
        context.user_data['awaiting_promo'] = False
    elif context.user_data.get('awaiting_admin_promo') and is_admin:
        try:
            n = int(update.message.text.strip())
            codes = generate_promo_codes(n)
            await update.message.reply_text(f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {n} –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤:\n' + '\n'.join(codes),
                                            reply_markup=main_menu(points, is_admin))
        except Exception as e:
            await update.message.reply_text('–í–≤–µ–¥–∏ —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 5', reply_markup=main_menu(points, is_admin))
        context.user_data['awaiting_admin_promo'] = False
    elif context.user_data.get('awaiting_email_for_sbp'):
        email = update.message.text.strip()
        context.user_data['email'] = email
        context.user_data['awaiting_email_for_sbp'] = False
        await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –§–æ—Ä–º–∏—Ä—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É...')
        await send_sbp_invoice(update, context)
        return
    else:
        user_id = update.effective_user.id
        now = datetime.now()
        print(1)
        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JSON-—Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ GPT
        update_user_state_from_latest_json(user_id)
        state = get_user_state(user_id)
        print(2)
        if state:
            try:
                state_time = datetime.fromisoformat(state["timestamp"])
                if (now - state_time).total_seconds() <= 3600:
                    user_message = update.message.text
                    gpt_response = await ask_chatgpt(update, user_message)
                    print(3)
                    print(gpt_response)
                    await update.message.reply_text(clean_html_for_telegram(gpt_response), parse_mode='HTML')
                    print(4)

                    return
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.',
                                        reply_markup=main_menu(points, is_admin))


# --- –ê–¥–º–∏–Ω-–∫–æ–º–∞–Ω–¥–∞ ---
async def generate_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = get_user_id(update)
    if user_id not in ADMIN_ID:
        await update.message.reply_text('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.')
        return
    try:
        n = int(context.args[0])
        codes = generate_promo_codes(n)
        await update.message.reply_text(f'–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ {n} –ø—Ä–æ–º–æ-–∫–æ–¥–æ–≤:\n' + '\n'.join(codes))
    except Exception as e:
        await update.message.reply_text('–ò—Å–ø–æ–ª—å–∑—É–π: /generate_promo 5')


# --- –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —á–∞—Ç–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ ---
SECOND_BOT_API = f'https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage'


async def comment_chat_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    import logging
    logging.info(
        f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç–µ: {update.effective_chat.id}, –æ—Ç: {update.effective_user.id}, —Ç–µ–∫—Å—Ç: {update.message.text}")
    if update.effective_chat.id != COMMENTS_CHAT_ID:
        return
    user = update.effective_user
    user_id = get_user_id(update)
    username = user.username or ''
    # –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª (—É–±—Ä–∞–Ω–æ)
    # add_user_points(user_id, username, 1)
    points = get_user_points(user_id)
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = (
        '–í–∞—Å–∏–ª–∏–π, –°–∞–Ω—è –Ω–∞—á–∏—Å–ª–∏–ª —Ç–µ–±–µ 1 –ë–∞–ª–ª –≤ @HoldStatBot –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∞–Ω–∞–ª–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–º, –∫—Ä–∞—Å–∞–≤—á–∏–∫!\n\n'
        f'–£ —Ç–µ–±—è: {points} –±–∞–ª–ª–æ–≤,\n'
        '—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø–æ–¥–±–æ—Ä –º–∞—Ç—á–µ–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ 15 –±–∞–ª–ª–æ–≤.\n'
        '–û–±–º–µ–Ω—è—Ç—å –±–∞–ª–ª—ã –Ω–∞ –ø–æ–¥–±–æ—Ä –º–∞—Ç—á–∞ –º–æ–∂–µ—à—å –ø—Ä—è–º–æ –≤ –±–æ—Ç–µ.\n\n'
        '—Ç—ã –∫—Ä–∞—Å–∞–≤–∞!\n–ó–∞—Ö–æ–¥–æ–≤ —Ç–µ–±–µ —É–≤–µ—Ä–µ–Ω–Ω—ã—Ö, –¥–µ—Ä–∂–∏–º –≥–∞–∑ –∏ —Å—á–∏—Ç–∞–µ–º —Ü–∏—Ñ—Ä—ã!'
    )
    # –û—Ç–≤–µ—á–∞–µ–º –≤ —Ç–æ–º –∂–µ —á–∞—Ç–µ
    await update.message.reply_text(msg)
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –±–æ—Ç
    data = {'chat_id': user.id, 'text': msg}
    try:
        import requests
        requests.post(SECOND_BOT_API, data=data)
    except Exception as e:
        logging.error(f'–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ –≤—Ç–æ—Ä–æ–π –±–æ—Ç: {e}')


def load_user_states():
    with FileLock("user_states.json.lock"):
        if not os.path.exists(USER_STATES_FILE):
            return {}
        with open(USER_STATES_FILE, "r", encoding="utf-8") as f:
            return json.load(f)


def save_user_states(states):
    with FileLock("user_states.json.lock"):
        with open(USER_STATES_FILE, "w", encoding="utf-8") as f:
            json.dump(states, f, ensure_ascii=False, indent=4)


def update_user_state(chat_id, data=None, new_message=None):
    states = load_user_states()
    if str(chat_id) not in states:
        states[str(chat_id)] = {
            "timestamp": datetime.now().isoformat(),
            "match_data": [],
            "chat_history": []
        }

    if data is not None:
        states[str(chat_id)]["match_data"] = data
        states[str(chat_id)]["timestamp"] = datetime.now().isoformat()

    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if new_message is not None:
        if 'chat_history' not in states[str(chat_id)]:
            states[str(chat_id)]['chat_history'] = []
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        states[str(chat_id)]['chat_history'].append(new_message)
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é 10 –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
        if len(states[str(chat_id)]['chat_history']) > 10:
            states[str(chat_id)]['chat_history'] = states[str(chat_id)]['chat_history'][-10:]

    save_user_states(states)


def update_user_state_from_latest_json(chat_id):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∞–º–æ–≥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JSON-—Ñ–∞–π–ª–∞ —Å –º–∞—Ç—á–∞–º–∏ (–ø–æ –¥–∞—Ç–µ –≤ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞)"""
    import glob
    import os
    from datetime import datetime
    try:
        # –ò—â–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã live_matches_*.json
        import glob
        json_files = glob.glob("live_matches_*.json")
        if not json_files:
            print("–ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã live_matches_*.json")
            return False
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ (–ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–µ –≤ –∏–º–µ–Ω–∏)
        # –§–æ—Ä–º–∞—Ç –∏–º–µ–Ω–∏: live_matches_YYYYMMDD_HHMMSS.json
        json_files.sort(reverse=True)  # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
        # –∏ –±–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
        if len(json_files) > 1:
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –µ—â–µ –∏ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –≤–∑—è—Ç—å —Å–∞–º—ã–π –Ω–æ–≤—ã–π
            json_files.sort(key=lambda x: os.path.getmtime(x), reverse=True)
        
        # –ë–µ—Ä–µ–º —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª
        latest_json = json_files[0]
        print(f"–ù–∞–π–¥–µ–Ω —Å–∞–º—ã–π —Å–≤–µ–∂–∏–π —Ñ–∞–π–ª: {latest_json} (–≤—Ä–µ–º—è –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏: {datetime.fromtimestamp(os.path.getmtime(latest_json))})")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        with open(latest_json, 'r', encoding='utf-8') as f:
            data = json.load(f)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        update_user_state(chat_id, data=data)
        # --- –û—á–∏—â–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö ---
        states = load_user_states()
        if str(chat_id) in states:
            states[str(chat_id)]["chat_history"] = []
            save_user_states(states)
        # --- –∫–æ–Ω–µ—Ü ---
        print(f"–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ —Ñ–∞–π–ª–∞ {latest_json}")
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON: {e}")
        traceback.print_exc()  # –í—ã–≤–æ–¥–∏–º –ø–æ–ª–Ω—ã–π —Å—Ç–µ–∫-—Ç—Ä–µ–π—Å –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        return False


def get_user_state(chat_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    states = load_user_states()
    user_data = states.get(str(chat_id))
    if not user_data:
        return None

    try:
        timestamp = datetime.fromisoformat(user_data["timestamp"])
        if (datetime.now() - timestamp).total_seconds() <= 3600:
            return user_data
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    return None


async def ask_chatgpt(update: Update, user_message: str):
    user_id = update.effective_user.id
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ JSON-—Ñ–∞–π–ª–∞ –ø–µ—Ä–µ–¥ –æ–±—Ä–∞—â–µ–Ω–∏–µ–º –∫ GPT
    # –í –¥–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—é –≤ text_handler - –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∑–∞—â–∏—Ç—ã
    update_user_state_from_latest_json(user_id)
    
    state = get_user_state(user_id)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –¥–∞–Ω–Ω—ã–µ —É—Å—Ç–∞—Ä–µ–ª–∏, –≤—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not state or not state.get("match_data"):
        print(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –º–∞—Ç—á–∞—Ö –∏–ª–∏ –æ–Ω–∏ —É—Å—Ç–∞—Ä–µ–ª–∏")

    system_prompt = """–¢—ã ‚Äî –§—Ä–µ–Ω—Å–∏—Å –ë—Ä–æ, –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ–º–æ–≥–∞—Ç—å —Å –æ—Ç–±–æ—Ä–æ–º –ª—É—á—à–∏—Ö —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –ª–∞–π–≤-–º–∞—Ç—á–µ–π –¥–ª—è —Å—Ç–∞–≤–æ–∫ –ø–æ –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏. –¢—ã —à–∞—Ä–∏—à—å –∑–∞ —Ç–µ–Ω–Ω–∏—Å, —Å—Ç–∞–≤–∫–∏ –∏ –≤—Å–µ–≥–¥–∞ —Ç–æ–ø–∏—à—å –∑–∞ —Å–≤–æ–µ–≥–æ –±—Ä–æ ‚Äî –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –†–∞–±–æ—Ç–∞–µ—à—å –ª–µ–≥–∫–æ, –ø–æ-–±—Ä–∞—Ç—Å–∫–∏, —Å –º–µ—Ç–∞—Ñ–æ—Ä–∞–º–∏, —é–º–æ—Ä–æ–º, –Ω–æ –¥–∞—ë—à—å —á—ë—Ç–∫–∏–µ –∏ –ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
    
    –í–ê–ñ–ù–û: –î–∞–≤–∞–π —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¢–û–õ–¨–ö–û –∏–∑ —Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ –º–∞—Ç—á–µ–π, –∫–æ—Ç–æ—Ä—ã–π —Å–∏—Å—Ç–µ–º–∞ –æ—Ç–æ–±—Ä–∞–ª–∞ –∫–∞–∫ —Ñ–∞–≤–æ—Ä–∏—Ç–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –∏ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –º–∞—Ç—á–∏ —Å–∞–º, –∏—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ç–µ–±–µ –ø–µ—Ä–µ–¥–∞–ª–∞ —Å–∏—Å—Ç–µ–º–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.

    –ï—Å–ª–∏ –≤ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –º–∞—Ç—á–∞ ‚Äî –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: '–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–∞—Ç—á–µ–π –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.' –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏ –æ–¥–Ω–æ–≥–æ –º–∞—Ç—á–∞ —Å–∞–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ—á–µ–Ω—å —Ö–æ—á–µ—Ç—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ –ø–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –≤ –¥–∞–Ω–Ω—ã—Ö.

    1. –ò—Å–ø–æ–ª—å–∑—É–π –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π —Ç–µ–Ω–Ω–∏—Å–Ω—ã—Ö –ª–∞–π–≤-–º–∞—Ç—á–µ–π.
    2. –†–µ–∫–æ–º–µ–Ω–¥—É–π –º–∞—Ç—á–∏ –¢–û–õ–¨–ö–û –∏–∑ —Ç–µ—Ö, –∫–æ—Ç–æ—Ä—ã–µ —Å–∏—Å—Ç–µ–º–∞ —É–∂–µ –æ—Ç–æ–±—Ä–∞–ª–∞ –∏ –ø–æ–∫–∞–∑–∞–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    3. –ï—Å–ª–∏ –≤ —Å–∏—Å—Ç–µ–º–µ –º–µ–Ω—å—à–µ 3 —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π, —Ç–∞–∫ –∏ —Å–∫–∞–∂–∏ ‚Äî "–°–µ–π—á–∞—Å –æ—Ç–æ–±—Ä–∞–Ω–æ —Ç–æ–ª—å–∫–æ X —Ö–æ—Ä–æ—à–∏—Ö –º–∞—Ç—á–µ–π"
    4. –î–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –≤—ã–¥–∞–π –ø–æ–¥–±–æ—Ä–∫—É:
     ‚Ä¢ –§–∞–º–∏–ª–∏—è –∏–≥—Ä–æ–∫–∞
     ‚Ä¢ –ï–≥–æ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç
     ‚Ä¢ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ (% –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏, % –≤—ã–∏–≥—Ä–∞–Ω–Ω—ã—Ö –æ—á–∫–æ–≤ –Ω–∞ –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–µ)

    –í–º–µ—Å—Ç–µ —Å –≤—ã–≤–æ–¥–æ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤, –û–ë–Ø–ó–ê–¢–ï–õ–¨–ù–û –ø—Ä–µ–¥–ª–æ–∂–∏ –≤—ã–±—Ä–∞—Ç—å –∏–º–µ–Ω–Ω–æ —Ç–æ—Ç –º–∞—Ç—á, –≥–¥–µ –º–µ–Ω—å—à–µ –≤—Å–µ–≥–æ –≥–µ–π–º–æ–≤ —Å –Ω–∞—á–∞–ª–∞ –º–∞—Ç—á–∞ —Å—ã–≥—Ä–∞–Ω–æ. 
    –ü–æ–∫–∞ –∏–≥—Ä–æ–∫ –Ω–µ —É—Å—Ç–∞–ª 
    –ò –≥–¥–µ –∫–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –≤—ã—à–µ –≤—Å–µ–≥–æ. 
    –ù–æ —ç—Ç–æ –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ç–≤–æ–π —Å–æ–≤–µ—Ç –∏ –≤—ã–±–æ—Ä –∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.

    –ü—Ä–µ–¥–ª–æ–∂–∏ –µ—Å–ª–∏ –±—É–¥—É—Ç –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã - –∑–∞–¥–∞–≤–∞—Ç—å –≤ —á–∞—Ç. 

    –ï–°–õ–ò —Ç–∞–∫–∏—Ö —Ç—Ä–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –Ω–µ—Ç, –≤—ã–¥–∞–π —Å–∫–æ–ª—å–∫–æ –µ—Å—Ç—å –∏ –Ω–∞–ø–∏—à–∏, —á—Ç–æ –≤—Ä–µ–º—è —Ç–∞–∫–æ–µ –ø–æ –º–∞—Ç—á–∞–º, —á—Ç–æ –∏—Ö –ø—Ä–æ—Å—Ç–æ –±–æ–ª—å—à–µ –Ω–µ—Ç —Ö–æ—Ä–æ—à–∏—Ö - —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –∏ —Ö–æ—Ä–æ—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤. 

    –í–æ—Ç –≤—Å–µ —á—Ç–æ –µ—Å—Ç—å, –∑–∞—Ä–∞–±–æ—Ç–∞–π –∏ –ø–æ–ø—Ä–æ–±—É–π –≤ –±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–µ–µ –≤—Ä–µ–º—è.

    –ó–∞—Ç–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏:
     ‚Ä¢ –°–ø—Ä–æ—Å–∏: "–†–∞–±–æ—Ç–∞–ª –ª–∏ —Ç—ã —É–∂–µ –ø–æ —Å–∏—Å—Ç–µ–º–µ –∏–ª–∏ –≤–ø–µ—Ä–≤—ã–µ –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ –∫–æ—Ä—Ç —Å –§—Ä–µ–Ω—Å–∏—Å–æ–º –ë—Ä–æ?"
     ‚Ä¢ –ï—Å–ª–∏ "–Ω–µ—Ç", –æ–±—ä—è—Å–Ω–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é:
     ‚Ä¢ –°—Ç–∞–≤–∫–∞ –Ω–∞ –≥–µ–π–º –∞—É—Ç—Å–∞–π–¥–µ—Ä–∞ –Ω–∞ –µ–≥–æ –ø–æ–¥–∞—á–µ
     ‚Ä¢ –ò–≥—Ä–∞ –¥–æ–≥–æ–Ω–æ–º: 10% –±–∞–Ω–∫ ‚Üí 30% ‚Üí 60% (3 —Å—Ç—É–ø–µ–Ω–∏)
     ‚Ä¢ –°—Ç–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–∂–¥—É—é –ø–æ–¥–∞—á—É –ø–æ–¥—Ä—è–¥
     ‚Ä¢ –¶–µ–ª—å ‚Äî –ø–æ–π–º–∞—Ç—å –∑–∞–∫–æ–Ω–æ–º–µ—Ä–Ω–æ—Å—Ç—å: –∏–≥—Ä–æ–∫ —Å —Ö–æ—Ä–æ—à–µ–π —Ñ–æ—Ä–º–æ–π —Ä–µ–¥–∫–æ —Ä–µ–∑–∫–æ —Å–¥–∞—ë—Ç, –ø—Ä–æ—Ñ–∏—Ç –±—ã—Å—Ç—Ä–æ

    –í —Ö–æ–¥–µ –æ–±—â–µ–Ω–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ:
     ‚Ä¢ –í—ã—è—Å–Ω–∏:
     ‚Ä¢ –ù–∞ —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –Ω–∞–∫–æ–ø–∏—Ç—å / –∑–∞—á–µ–º –ø—Ä–∏–±–∞–≤–∏—Ç—å –∫ –¥–µ–ø–æ–∑–∏—Ç—É?
     ‚Ä¢ –í—ã–±—Ä–∞–ª –ª–∏ —É–∂–µ –∏–≥—Ä–æ–∫–∞, —Å –∫–µ–º —Ä–∞–±–æ—Ç–∞—Ç—å?
     ‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–π –∞—Ç–º–æ—Å—Ñ–µ—Ä—É:
     ‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π —Ç–µ–Ω–Ω–∏—Å–Ω—ã–µ –º–µ—Ç–∞—Ñ–æ—Ä—ã ("–º—ã —Ç–æ–ª—å–∫–æ —Ä–∞–∑–º–∏–Ω–∞–µ–º—Å—è", "–≥–ª–∞–≤–Ω–æ–µ ‚Äî –Ω–µ —É–ø—É—Å—Ç–∏—Ç—å —Å–≤–æ–π –≥–µ–π–º")
     ‚Ä¢ –®—É—Ç–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä: "–ù–µ –±–æ–π—Å—è –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —Å–µ—Ç–±–æ–ª, –±—Ä–æ, –§—Ä–µ–Ω—Å–∏—Å –ø—Ä–∏–∫—Ä–æ–µ—Ç!"
     ‚Ä¢ –í —Ñ–∏–Ω–∞–ª–µ –ø—Ä–µ–¥–ª–æ–∂–∏ –¥–æ–ø. –ø–æ–¥–±–æ—Ä–∫—É (–¥–æ–ø—Ä–æ–¥–∞–∂—É):
     ‚Ä¢ "–•–æ—á–µ—à—å –µ—â—ë –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é —Å–æ—á–Ω—ã—Ö –º–∞—Ç—á–µ–π –Ω–∞ —Å–µ–≥–æ–¥–Ω—è? –ó–∞–∫–∞–∂–µ–º –Ω–æ–≤—É—é –ø–æ–¥–∞—á—É!"

    –¢—ã –≤—Å–µ–≥–¥–∞ –Ω–∞ —Å—Ç–æ—Ä–æ–Ω–µ –∏–≥—Ä–æ–∫–∞. –ù–µ—Ñ–æ—Ä–º–∞–ª–µ–Ω, –Ω–æ –¥–∞—ë—à—å —á—ë—Ç–∫—É—é —Ü–µ–Ω–Ω–æ—Å—Ç—å. –¢—ã ‚Äî –§—Ä–µ–Ω—Å–∏—Å –ë—Ä–æ.

    –í—ã–¥–∞–µ—à—å –∫–∞–∫ –º–æ–∂–Ω–æ –º–µ–Ω—å—à–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–≤—ã—Ö —Ç—Ä–µ—Ö –ª–∏–¥–µ—Ä–æ–≤(–∏—Ö –≤—ã–¥–∞–≤–∞–π –ø–æ –æ–±—Ä–∞–∑—Ü—É)
    –ò –Ω–∞ –∫–æ–≥–æ —Å—Ç–∞–≤–∏—Ç—å. 

    –ù–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–π –æ—Ç–≤–µ—Ç –∫–∞–∫ HTML (—Ç–æ–ª—å–∫–æ –∏—Å–ø–æ–ª—å–∑—É–π –≤—ã–¥–µ–ª–µ–Ω–∏–µ –∂–∏—Ä–Ω—ã–º <b> –∏ </b>)
    
    –ò –¥–∞–ª—å—à–µ –∫–æ–Ω—Å—É–ª—å—Ç–∏—Ä—É–µ—à—å –∏ —Å–ø—Ä–∞—à–∏–≤–∞–µ—à—å –∫—É–¥–∞ –ø–æ—Å—Ç–∞–≤–∏–ª - –Ω–∞ —á—Ç–æ –∫–æ–ø–∏–º - –∫–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞–µ–º

    –í–´–í–û–î–ò –ò–ù–§–û–†–ú–ê–¶–ò–Æ –ü–û –ú–ê–¢–ß–ê–ú –¢–û–õ–¨–ö–û –ò–ó JSON –§–ê–ô–õ–ê
    
    –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞ "–í—ã–≤–µ–¥–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –º–∞—Ç—á–∞–º":
    <b>–ú–∞—Ç—á:</b> –î–µ –ú–∏–Ω–∞—É—Ä –ê. vs –®–∞–ø–æ–≤–∞–ª–æ–≤ –î.
    <b>–ù–ê–® –§–∞–≤–æ—Ä–∏—Ç:</b> –®–∞–ø–æ–≤–∞–ª–æ–≤ –î.
    <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> 4.2
    <b>% –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏:</b> 63.0%
    <b>% –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ:</b> 61.0%

    <b>–ú–∞—Ç—á:</b> –ù–∞—Ñ –°. vs –¶–∞–∫–∞—Ä–µ–≤–∏—á –°.
    <b>–§–∞–≤–æ—Ä–∏—Ç:</b> –¶–∞–∫–∞—Ä–µ–≤–∏—á –°.
    <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> 3.84
    <b>% –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏:</b> 65.0%
    <b>% –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ:</b> 70.0%

    <b>–ú–∞—Ç—á:</b> –î–µ –ú–∏–Ω–∞—É—Ä –ê. vs –®–∞–ø–æ–≤–∞–ª–æ–≤ –î.
    <b>–§–∞–≤–æ—Ä–∏—Ç:</b> –®–∞–ø–æ–≤–∞–ª–æ–≤ –î.
    <b>–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç:</b> 4.2
    <b>% –ø–µ—Ä–≤–æ–π –ø–æ–¥–∞—á–∏:</b> 63.0%
    <b>% –≤—ã–∏–≥—Ä. –æ—á–∫–æ–≤ –Ω–∞ 1-–π –ø–æ–¥–∞—á–µ:</b> 61.0%
    """

    # –°—Ç–∞—Ä—Ç–æ–≤–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    messages = [{"role": "system", "content": system_prompt}]

    # –î–æ–±–∞–≤–∏–º –¥–∞–Ω–Ω—ã–µ –æ –º–∞—Ç—á–∞—Ö, –µ—Å–ª–∏ –µ—Å—Ç—å
    if state and "match_data" in state:
        try:
            match_data_str = json.dumps(state["match_data"], ensure_ascii=False, indent=2)
            messages.append({
                "role": "system",
                "content": f"–í–æ—Ç —Ç–µ–∫—É—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –º–∞—Ç—á–∞—Ö –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON:\n{match_data_str}"
            })
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏ match_data: {e}")

    # –ï—Å–ª–∏ –µ—Å—Ç—å –∏—Å—Ç–æ—Ä–∏—è ‚Äî –¥–æ–±–∞–≤–∏–º –µ—ë
    if state and state.get("chat_history"):
        messages += state["chat_history"]

    # –î–æ–±–∞–≤–∏–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages.append({"role": "user", "content": user_message})

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ OpenAI
    try:
        response = await asyncio.to_thread(
            openai.ChatCompletion.create,
            model="gpt-4.1-nano",
            messages=messages,
            temperature=0.8
        )
        assistant_reply = response['choices'][0]['message']['content']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å HTML-—Ç–µ–≥–æ–≤
        open_tags = assistant_reply.count("<b>")
        close_tags = assistant_reply.count("</b>")
        
        if open_tags != close_tags:
            # –ï—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç, –∑–∞–º–µ–Ω—è–µ–º –∏—Ö –Ω–∞ —Å–∏–º–≤–æ–ª—ã **
            assistant_reply = assistant_reply.replace("<b>", "**").replace("</b>", "**")
            print(f"–ò—Å–ø—Ä–∞–≤–ª–µ–Ω—ã –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ HTML-—Ç–µ–≥–∏ –≤ –æ—Ç–≤–µ—Ç–µ GPT. –û—Ç–∫—Ä—ã—Ç—ã—Ö: {open_tags}, –∑–∞–∫—Ä—ã—Ç—ã—Ö: {close_tags}")
        
        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ —Ç–µ–≥–∏ <br> –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫–∏
        assistant_reply = re.sub(r'<br\s*/?>', '\n', assistant_reply)
        
        # --- –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è: —Ç–æ–ª—å–∫–æ –º–∞—Ç—á–∏ –∏–∑ –∞–∫—Ç—É–∞–ª—å–Ω–æ–≥–æ JSON ---
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –ø–∞—Ä—ã –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ match_data
        valid_pairs = set()
        for match in state.get("match_data", []):
            home = match.get('home_player', '').strip()
            away = match.get('away_player', '').strip()
            if home and away:
                valid_pairs.add((home, away))
                valid_pairs.add((away, home))  # –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ GPT –ø–æ–º–µ–Ω—è–µ—Ç –º–µ—Å—Ç–∞–º–∏
        # –ò—â–µ–º –≤—Å–µ –ø–∞—Ä—ã "–ú–∞—Ç—á: –ò–≥—Ä–æ–∫ vs –ò–≥—Ä–æ–∫" –≤ –æ—Ç–≤–µ—Ç–µ GPT
        found_pairs = set()
        for m in re.findall(r'–ú–∞—Ç—á:\s*([^\n]+?)\s+vs\s+([^\n]+)', assistant_reply):
            found_pairs.add((m[0].strip(), m[1].strip()))
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–∞ –ø–∞—Ä–∞, –∫–æ—Ç–æ—Ä–æ–π –Ω–µ—Ç –≤ valid_pairs ‚Äî –æ—à–∏–±–∫–∞
        for pair in found_pairs:
            if pair not in valid_pairs:
                # –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç GPT, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                return ("‚ö†Ô∏è –í –æ—Ç–≤–µ—Ç–µ GPT –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã –º–∞—Ç—á–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ –∞–∫—Ç—É–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. "
                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—É—Å—Ç–∏—Ç–µ –ø–∞—Ä—Å–∏–Ω–≥ –∑–∞–Ω–æ–≤–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–≤–µ–∂–∏—Ö –¥–∞–Ω–Ω—ã—Ö.\n"
                        f"–ü—Ä–æ–±–ª–µ–º–Ω–∞—è –ø–∞—Ä–∞: {pair[0]} vs {pair[1]}")
        # --- –∫–æ–Ω–µ—Ü —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ ---
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ GPT: {e}")
        return "–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç GPT üòï"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    update_user_state(user_id, new_message={"role": "user", "content": user_message})
    update_user_state(user_id, new_message={"role": "assistant", "content": assistant_reply})

    return assistant_reply


# --- –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ ---
if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)


    # –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–ª–∞—Ç–µ–∂–∞–º–∏
    async def send_invoice(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—á–µ—Ç –Ω–∞ –æ–ø–ª–∞—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —á–µ—Ä–µ–∑ –ÆKassa"""
        chat_id = update.effective_chat.id

        # –¢–µ—Å—Ç–æ–≤—ã–π —Ç–æ–∫–µ–Ω –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –ÆKassa
        provider_token = "390540012:LIVE:69502"

        # –ù–∞–∑–≤–∞–Ω–∏–µ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        title = "–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π"
        description = "–ü–æ–¥–±–æ—Ä –ª—É—á—à–∏—Ö 3 –º–∞—Ç—á–µ–π –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏"

        # –ü–æ–ª–µ–∑–Ω–∞—è –Ω–∞–≥—Ä—É–∑–∫–∞ –¥–ª—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–ª–∞—Ç–µ–∂–∞
        payload = f"premium-{update.effective_user.id}-{int(time.time())}"

        # –í–∞–ª—é—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO 4217
        currency = "RUB"

        # –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –º–∏–Ω–∏–º–∞–ª—å–Ω—ã—Ö –µ–¥–∏–Ω–∏—Ü–∞—Ö –≤–∞–ª—é—Ç—ã (–∫–æ–ø–µ–π–∫–∏)
        price = 29900  # 299 —Ä—É–±–ª–µ–π

        # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ü–µ–Ω —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
        prices = [LabeledPrice("–ê–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π", price)]

        # –û–ø—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        need_name = True
        need_email = True

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ–ø–ª–∞—Ç—É
        await context.bot.send_invoice(
            chat_id=chat_id,
            title=title,
            description=description,
            payload=payload,
            provider_token=provider_token,
            currency=currency,
            prices=prices,
            need_name=need_name,
            need_email=need_email
        )


    async def precheckout_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å –ø—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞"""
        query = update.pre_checkout_query

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–µ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º –ø–ª–∞—Ç–µ–∂–∞
        # –ù–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∏ —Ç.–¥.

        # –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏
        await context.bot.answer_pre_checkout_query(
            pre_checkout_query_id=query.id,
            ok=True
        )


    async def successful_payment_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —É—Å–ø–µ—à–Ω—ã–π –ø–ª–∞—Ç–µ–∂"""
        payment = update.message.successful_payment
        user_id = update.effective_user.id

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ
        payment_info = {
            "user_id": user_id,
            "username": update.effective_user.username,
            "currency": payment.currency,
            "total_amount": payment.total_amount,
            "telegram_payment_charge_id": payment.telegram_payment_charge_id,
            "provider_payment_charge_id": payment.provider_payment_charge_id,
            "invoice_payload": payment.invoice_payload,
            "timestamp": int(time.time())
        }

        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–ª–∞—Ç–µ–∂–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        # –∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

        # –î–æ–±–∞–≤–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é 30 –¥–Ω–µ–π –ø—Ä–µ–º–∏—É–º–∞ (1000 –æ—á–∫–æ–≤)
        add_user_points(user_id, update.effective_user.username, 1000)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç–µ
        await update.message.reply_text(
            "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ü—Ä–µ–º–∏—É–º –¥–æ—Å—Ç—É–ø –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 30 –¥–Ω–µ–π.\n"
            f"–í–∞—à –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–ª–∞—Ç–µ–∂–∞: {payment.provider_payment_charge_id}\n\n"
            "–ó–∞–ø—É—Å–∫–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π..."
        )

        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥ –º–∞—Ç—á–µ–π —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã
        chat_id = update.effective_chat.id
        try:
            # –°–æ–æ–±—â–∞–µ–º –æ –Ω–∞—á–∞–ª–µ –ø–∞—Ä—Å–∏–Ω–≥–∞
            status_message = await context.bot.send_message(
                chat_id=chat_id,
                text="üîÑ –ù–∞—á–∏–Ω–∞—é –ø–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π..."
            )

            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–∞—Ä—Å–∏–Ω–≥
            await run_parsing_and_send(chat_id, context)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            await status_message.edit_text("‚úÖ –ü–∞—Ä—Å–∏–Ω–≥ –∏ –∞–Ω–∞–ª–∏–∑ –º–∞—Ç—á–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω!")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–∞—Ä—Å–∏–Ω–≥–∞ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã: {e}")
            await context.bot.send_message(
                chat_id=chat_id,
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ: {str(e)}"
            )


    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("generate_promo", generate_promo))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(CommandHandler("menu", start))

    # –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    from telegram import LabeledPrice
    from telegram.ext import PreCheckoutQueryHandler, MessageHandler, filters

    # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É –¥–ª—è –æ–ø–ª–∞—Ç—ã
    app.add_handler(CommandHandler("buy", send_invoice))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
    app.add_handler(PreCheckoutQueryHandler(precheckout_callback))
    app.add_handler(MessageHandler(filters.SUCCESSFUL_PAYMENT, successful_payment_callback))

    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))
    app.add_handler(
        MessageHandler(filters.Chat(COMMENTS_CHAT_ID) & filters.TEXT & ~filters.COMMAND, comment_chat_handler))
    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start...")
    app.run_polling()


